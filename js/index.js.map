{"version":3,"sources":["controller/AppStates.ts","controller/GraphExamples.ts","model/WeightedGraph.ts","model/PriorityQueue.ts","model/Dijkstra.ts","view/UiConfig.ts","view/CanvasGraph.ts","view/NodeGrid.ts","view/TextDescription.ts","controller/utils.ts","view/Table.ts","view/Graph.ts","view/ButtonHandler.ts","view/ModalFuncs.ts","view/UiCtrl.ts","controller/Controller.ts","index.ts"],"names":[],"mappings":"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","file":"index.js","sourceRoot":"..\\src","sourcesContent":["export const APP_STATES = {\r\n  NONE: 'NONE',\r\n  NODE_EDIT: 'NODE_EDIT',\r\n  EDGE_EDIT: 'EDGE_EDIT',\r\n  DELETE_OBJ: 'DELETE_OBJ',\r\n  RUNNING: 'RUNNING',\r\n  PAUSED: 'PAUSED',\r\n  PREDICTING: 'PREDICTING'\r\n};\r\n","import { GraphStructure } from './GraphStructure';\r\n\r\nexport const EXAMPLE_GRAPHS: GraphStructure[] = [\r\n  {\r\n    nodes: [\r\n      {\r\n        id: '0',\r\n        label: 'A',\r\n        x: 3,\r\n        y: 7\r\n      },\r\n      {\r\n        id: '1',\r\n        label: 'B',\r\n        x: 6,\r\n        y: 3\r\n      },\r\n      {\r\n        id: '2',\r\n        label: 'C',\r\n        x: 9,\r\n        y: 3\r\n      },\r\n      {\r\n        id: '3',\r\n        label: 'D',\r\n        x: 13,\r\n        y: 3\r\n      },\r\n      {\r\n        id: '4',\r\n        label: 'E',\r\n        x: 16,\r\n        y: 7\r\n      },\r\n      {\r\n        id: '5',\r\n        label: 'F',\r\n        x: 13,\r\n        y: 11\r\n      },\r\n      {\r\n        id: '6',\r\n        label: 'G',\r\n        x: 9,\r\n        y: 11\r\n      },\r\n      {\r\n        id: '7',\r\n        label: 'H',\r\n        x: 6,\r\n        y: 11\r\n      },\r\n      {\r\n        id: '8',\r\n        label: 'I',\r\n        x: 9,\r\n        y: 7,\r\n      }\r\n    ],\r\n    edges: [\r\n      {\r\n        start: '0',\r\n        end: '1',\r\n        weight: 4\r\n      },\r\n      {\r\n        start: '0',\r\n        end: '7',\r\n        weight: 8\r\n      },\r\n      {\r\n        start: '1',\r\n        end: '2',\r\n        weight: 8,\r\n      },\r\n      {\r\n        start: '1',\r\n        end: '7',\r\n        weight: 11\r\n      },\r\n      {\r\n        start: '2',\r\n        end: '3',\r\n        weight: 7\r\n      },\r\n      {\r\n        start: '2',\r\n        end: '5',\r\n        weight: 4\r\n      },\r\n      {\r\n        start: '2',\r\n        end: '8',\r\n        weight: 2\r\n      },\r\n      {\r\n        start: '3',\r\n        end: '4',\r\n        weight: 9\r\n      },\r\n      {\r\n        start: '3',\r\n        end: '5',\r\n        weight: 14\r\n      },\r\n      {\r\n        start: '4',\r\n        end: '5',\r\n        weight: 10\r\n      },\r\n      {\r\n        start: '5',\r\n        end: '6',\r\n        weight: 2\r\n      },\r\n      {\r\n        start: '6',\r\n        end: '7',\r\n        weight: 1\r\n      },\r\n      {\r\n        start: '6',\r\n        end: '8',\r\n        weight: 6\r\n      },\r\n      {\r\n        start: '7',\r\n        end: '8',\r\n        weight: 7\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    nodes: [\r\n      {\r\n        id: '0',\r\n        label: 'Dublin',\r\n        x: 1,\r\n        y: 7\r\n      },\r\n      {\r\n        id: '1',\r\n        label: 'Abu Dhabi',\r\n        x: 5,\r\n        y: 2\r\n      },\r\n      {\r\n        id: '2',\r\n        label: 'Brisbane',\r\n        x: 13,\r\n        y: 2\r\n      },\r\n      {\r\n        id: '3',\r\n        label: 'Hong Kong',\r\n        x: 5,\r\n        y: 6\r\n      },\r\n      {\r\n        id: '4',\r\n        label: 'Melbourne',\r\n        x: 13,\r\n        y: 6\r\n      },\r\n      {\r\n        id: '5',\r\n        label: 'Dubai',\r\n        x: 5,\r\n        y: 10\r\n      },\r\n      {\r\n        id: '6',\r\n        label: 'Sydney',\r\n        x: 13,\r\n        y: 10\r\n      },\r\n      {\r\n        id: '7',\r\n        label: 'Doha',\r\n        x: 5,\r\n        y: 13\r\n      },\r\n      {\r\n        id: '8',\r\n        label: 'Perth',\r\n        x: 13,\r\n        y: 13\r\n      },\r\n      {\r\n        id: '9',\r\n        label: 'Alice Springs',\r\n        x: 18,\r\n        y: 7\r\n      }\r\n    ],\r\n    edges: [\r\n      {\r\n        start: '0',\r\n        end: '1',\r\n        weight: 472\r\n      },\r\n      {\r\n        start: '0',\r\n        end: '3',\r\n        weight: 1168\r\n      },\r\n      {\r\n        start: '0',\r\n        end: '5',\r\n        weight: 530\r\n      },\r\n      {\r\n        start: '0',\r\n        end: '7',\r\n        weight: 820\r\n      },\r\n      {\r\n        start: '1',\r\n        end: '2',\r\n        weight: 1296\r\n      },\r\n      {\r\n        start: '1',\r\n        end: '4',\r\n        weight: 1285\r\n      },\r\n      {\r\n        start: '3',\r\n        end: '2',\r\n        weight: 518\r\n      },\r\n      {\r\n        start: '3',\r\n        end: '4',\r\n        weight: 592\r\n      },\r\n      {\r\n        start: '3',\r\n        end: '6',\r\n        weight: 510\r\n      },\r\n      {\r\n        start: '5',\r\n        end: '6',\r\n        weight: 1312\r\n      },\r\n      {\r\n        start: '5',\r\n        end: '8',\r\n        weight: 1228\r\n      },\r\n      {\r\n        start: '7',\r\n        end: '6',\r\n        weight: 1612\r\n      },\r\n      {\r\n        start: '7',\r\n        end: '8',\r\n        weight: 1591\r\n      },\r\n      {\r\n        start: '2',\r\n        end: '9',\r\n        weight: 457\r\n      },\r\n      {\r\n        start: '4',\r\n        end: '9',\r\n        weight: 480\r\n      },\r\n      {\r\n        start: '6',\r\n        end: '9',\r\n        weight: 401\r\n      },\r\n      {\r\n        start: '8',\r\n        end: '9',\r\n        weight: 563\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"nodes\": [\r\n      {\r\n        \"id\": '0',\r\n        \"label\": \"Bishan\",\r\n        \"x\": 9,\r\n        \"y\": 8\r\n      },\r\n      {\r\n        \"id\": '1',\r\n        \"label\": \"Yishun\",\r\n        \"x\": 9,\r\n        \"y\": 4\r\n      },\r\n      {\r\n        \"id\": '4',\r\n        \"label\": \"Botanics\",\r\n        \"x\": 6,\r\n        \"y\": 9\r\n      },\r\n      {\r\n        \"id\": '5',\r\n        \"label\": \"Buona\",\r\n        \"x\": 5,\r\n        \"y\": 12\r\n      },\r\n      {\r\n        \"id\": '6',\r\n        \"label\": \"JE\",\r\n        \"x\": 3,\r\n        \"y\": 10\r\n      },\r\n      {\r\n        \"id\": '7',\r\n        \"label\": \"Boon Lay\",\r\n        \"x\": 0,\r\n        \"y\": 11\r\n      },\r\n      {\r\n        \"id\": '8',\r\n        \"label\": \"CCK\",\r\n        \"x\": 3,\r\n        \"y\": 5\r\n      },\r\n      {\r\n        \"id\": '9',\r\n        \"label\": \"Woodlands\",\r\n        \"x\": 6,\r\n        \"y\": 1\r\n      },\r\n      {\r\n        \"id\": '10',\r\n        \"label\": \"Serangoon\",\r\n        \"x\": 12,\r\n        \"y\": 7\r\n      },\r\n      {\r\n        \"id\": '11',\r\n        \"label\": \"Sengkang\",\r\n        \"x\": 13,\r\n        \"y\": 2\r\n      },\r\n      {\r\n        \"id\": '14',\r\n        \"label\": \"Tampines\",\r\n        \"x\": 18,\r\n        \"y\": 5\r\n      },\r\n      {\r\n        \"id\": '15',\r\n        \"label\": \"City Hall\",\r\n        \"x\": 11,\r\n        \"y\": 12\r\n      },\r\n      {\r\n        \"id\": '16',\r\n        \"label\": \"Outram\",\r\n        \"x\": 8,\r\n        \"y\": 13\r\n      },\r\n      {\r\n        \"id\": '17',\r\n        \"label\": \"Harbourfront\",\r\n        \"x\": 6,\r\n        \"y\": 15\r\n      },\r\n      {\r\n        \"id\": '18',\r\n        \"label\": \"Shenton\",\r\n        \"x\": 10,\r\n        \"y\": 14\r\n      },\r\n      {\r\n        \"id\": '19',\r\n        \"label\": \"Dhoby\",\r\n        \"x\": 9,\r\n        \"y\": 11\r\n      },\r\n      {\r\n        \"id\": '22',\r\n        \"label\": \"Bugis\",\r\n        \"x\": 12,\r\n        \"y\": 11\r\n      },\r\n      {\r\n        \"id\": '23',\r\n        \"label\": \"Paya Lebar\",\r\n        \"x\": 15,\r\n        \"y\": 10\r\n      },\r\n      {\r\n        \"id\": '24',\r\n        \"label\": \"Tanah Merah\",\r\n        \"x\": 17,\r\n        \"y\": 9\r\n      },\r\n      {\r\n        \"id\": '25',\r\n        \"label\": \"Expo\",\r\n        \"x\": 19,\r\n        \"y\": 10\r\n      },\r\n      {\r\n        \"id\": '26',\r\n        \"label\": \"MacPherson\",\r\n        \"x\": 14,\r\n        \"y\": 8\r\n      }\r\n    ],\r\n    \"edges\": [\r\n      {\r\n        \"start\": '0',\r\n        \"end\": '1',\r\n        \"weight\": 15\r\n      },\r\n      {\r\n        \"start\": '1',\r\n        \"end\": '9',\r\n        \"weight\": 15\r\n      },\r\n      {\r\n        \"start\": '9',\r\n        \"end\": '8',\r\n        \"weight\": 12\r\n      },\r\n      {\r\n        \"start\": '0',\r\n        \"end\": '19',\r\n        \"weight\": 15\r\n      },\r\n      {\r\n        \"start\": '19',\r\n        \"end\": '15',\r\n        \"weight\": 3\r\n      },\r\n      {\r\n        \"start\": '19',\r\n        \"end\": '10',\r\n        \"weight\": 15\r\n      },\r\n      {\r\n        \"start\": '11',\r\n        \"end\": '10',\r\n        \"weight\": 10\r\n      },\r\n      {\r\n        \"start\": '0',\r\n        \"end\": '10',\r\n        \"weight\": 5\r\n      },\r\n      {\r\n        \"start\": '15',\r\n        \"end\": '18',\r\n        \"weight\": 7\r\n      },\r\n      {\r\n        \"start\": '16',\r\n        \"end\": '18',\r\n        \"weight\": 4\r\n      },\r\n      {\r\n        \"start\": '17',\r\n        \"end\": '16',\r\n        \"weight\": 4\r\n      },\r\n      {\r\n        \"start\": '5',\r\n        \"end\": '17',\r\n        \"weight\": 10\r\n      },\r\n      {\r\n        \"start\": '5',\r\n        \"end\": '16',\r\n        \"weight\": 12\r\n      },\r\n      {\r\n        \"start\": '5',\r\n        \"end\": '4',\r\n        \"weight\": 10\r\n      },\r\n      {\r\n        \"start\": '4',\r\n        \"end\": '0',\r\n        \"weight\": 10\r\n      },\r\n      {\r\n        \"start\": '4',\r\n        \"end\": '8',\r\n        \"weight\": 25\r\n      },\r\n      {\r\n        \"start\": '5',\r\n        \"end\": '6',\r\n        \"weight\": 10\r\n      },\r\n      {\r\n        \"start\": '6',\r\n        \"end\": '7',\r\n        \"weight\": 10\r\n      },\r\n      {\r\n        \"start\": '6',\r\n        \"end\": '8',\r\n        \"weight\": 10\r\n      },\r\n      {\r\n        \"start\": '22',\r\n        \"end\": '15',\r\n        \"weight\": 2\r\n      },\r\n      {\r\n        \"start\": '22',\r\n        \"end\": '23',\r\n        \"weight\": 12\r\n      },\r\n      {\r\n        \"start\": '23',\r\n        \"end\": '24',\r\n        \"weight\": 10\r\n      },\r\n      {\r\n        \"start\": '24',\r\n        \"end\": '25',\r\n        \"weight\": 3\r\n      },\r\n      {\r\n        \"start\": '24',\r\n        \"end\": '14',\r\n        \"weight\": 5\r\n      },\r\n      {\r\n        \"start\": '14',\r\n        \"end\": '25',\r\n        \"weight\": 8\r\n      },\r\n      {\r\n        \"start\": '4',\r\n        \"end\": '22',\r\n        \"weight\": 13\r\n      },\r\n      {\r\n        \"start\": '10',\r\n        \"end\": '26',\r\n        \"weight\": 8\r\n      },\r\n      {\r\n        \"start\": '26',\r\n        \"end\": '23',\r\n        \"weight\": 2\r\n      },\r\n      {\r\n        \"start\": '26',\r\n        \"end\": '14',\r\n        \"weight\": 12\r\n      },\r\n      {\r\n        \"start\": '16',\r\n        \"end\": '19',\r\n        \"weight\": 6\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"nodes\": [\r\n      {\r\n        \"id\": '0',\r\n        \"label\": \"JE\",\r\n        \"x\": 2,\r\n        \"y\": 11\r\n      },\r\n      {\r\n        \"id\": '1',\r\n        \"label\": \"CCK\",\r\n        \"x\": 2,\r\n        \"y\": 5\r\n      },\r\n      {\r\n        \"id\": '2',\r\n        \"label\": \"Kranji\",\r\n        \"x\": 2,\r\n        \"y\": 2\r\n      },\r\n      {\r\n        \"id\": '3',\r\n        \"label\": \"Woodlands\",\r\n        \"x\": 5,\r\n        \"y\": 0\r\n      },\r\n      {\r\n        \"id\": '4',\r\n        \"label\": \"Yishun\",\r\n        \"x\": 8,\r\n        \"y\": 1\r\n      },\r\n      {\r\n        \"id\": '5',\r\n        \"label\": \"Bishan\",\r\n        \"x\": 8,\r\n        \"y\": 5\r\n      },\r\n      {\r\n        \"id\": '6',\r\n        \"label\": \"Newton\",\r\n        \"x\": 8,\r\n        \"y\": 8\r\n      },\r\n      {\r\n        \"id\": '7',\r\n        \"label\": \"Dhoby\",\r\n        \"x\": 9,\r\n        \"y\": 10\r\n      },\r\n      {\r\n        \"id\": '8',\r\n        \"label\": \"RP\",\r\n        \"x\": 10,\r\n        \"y\": 12\r\n      },\r\n      {\r\n        \"id\": '9',\r\n        \"label\": \"Bay\",\r\n        \"x\": 11,\r\n        \"y\": 15\r\n      },\r\n      {\r\n        \"id\": '10',\r\n        \"label\": \"Pasir Ris\",\r\n        \"x\": 19,\r\n        \"y\": 5\r\n      },\r\n      {\r\n        \"id\": '11',\r\n        \"label\": \"Tampines\",\r\n        \"x\": 18,\r\n        \"y\": 7\r\n      },\r\n      {\r\n        \"id\": '12',\r\n        \"label\": \"Tanah Merah\",\r\n        \"x\": 17,\r\n        \"y\": 9\r\n      },\r\n      {\r\n        \"id\": '13',\r\n        \"label\": \"Expo\",\r\n        \"x\": 19,\r\n        \"y\": 10\r\n      },\r\n      {\r\n        \"id\": '14',\r\n        \"label\": \"Paya Lebar\",\r\n        \"x\": 14,\r\n        \"y\": 10\r\n      },\r\n      {\r\n        \"id\": '15',\r\n        \"label\": \"Bugis\",\r\n        \"x\": 12,\r\n        \"y\": 11\r\n      },\r\n      {\r\n        \"id\": '16',\r\n        \"label\": \"Outram\",\r\n        \"x\": 7,\r\n        \"y\": 14\r\n      },\r\n      {\r\n        \"id\": '17',\r\n        \"label\": \"Buona\",\r\n        \"x\": 4,\r\n        \"y\": 11\r\n      },\r\n      {\r\n        \"id\": '18',\r\n        \"label\": \"Boon Lay\",\r\n        \"x\": 0,\r\n        \"y\": 11\r\n      },\r\n      {\r\n        \"id\": '19',\r\n        \"label\": \"Tuas\",\r\n        \"x\": 0,\r\n        \"y\": 8\r\n      },\r\n      {\r\n        \"id\": '20',\r\n        \"label\": \"Harbourfront\",\r\n        \"x\": 5,\r\n        \"y\": 15\r\n      },\r\n      {\r\n        \"id\": '21',\r\n        \"label\": \"Chinatown\",\r\n        \"x\": 7,\r\n        \"y\": 12\r\n      },\r\n      {\r\n        \"id\": '22',\r\n        \"label\": \"Little India\",\r\n        \"x\": 10,\r\n        \"y\": 9\r\n      },\r\n      {\r\n        \"id\": '23',\r\n        \"label\": \"Serangoon\",\r\n        \"x\": 12,\r\n        \"y\": 5\r\n      },\r\n      {\r\n        \"id\": '24',\r\n        \"label\": \"Sengkang\",\r\n        \"x\": 14,\r\n        \"y\": 2\r\n      },\r\n      {\r\n        \"id\": '25',\r\n        \"label\": \"Punggol\",\r\n        \"x\": 15,\r\n        \"y\": 0\r\n      },\r\n      {\r\n        \"id\": '26',\r\n        \"label\": \"Botanics\",\r\n        \"x\": 5,\r\n        \"y\": 8\r\n      },\r\n      {\r\n        \"id\": '27',\r\n        \"label\": \"Caldecott\",\r\n        \"x\": 6,\r\n        \"y\": 6\r\n      },\r\n      {\r\n        \"id\": '28',\r\n        \"label\": \"MacPherson\",\r\n        \"x\": 14,\r\n        \"y\": 7\r\n      },\r\n      {\r\n        \"id\": '29',\r\n        \"label\": \"Promenade\",\r\n        \"x\": 13,\r\n        \"y\": 13\r\n      },\r\n      {\r\n        \"id\": '30',\r\n        \"label\": \"BP\",\r\n        \"x\": 4,\r\n        \"y\": 5\r\n      },\r\n      {\r\n        \"id\": '31',\r\n        \"label\": \"Downtown\",\r\n        \"x\": 9,\r\n        \"y\": 14\r\n      },\r\n      {\r\n        \"id\": '32',\r\n        \"label\": \"Jln Besar\",\r\n        \"x\": 12,\r\n        \"y\": 9\r\n      }\r\n    ],\r\n    \"edges\": [\r\n      {\r\n        \"start\": '0',\r\n        \"end\": '1',\r\n        \"weight\": 15\r\n      },\r\n      {\r\n        \"start\": '1',\r\n        \"end\": '2',\r\n        \"weight\": 8\r\n      },\r\n      {\r\n        \"start\": '2',\r\n        \"end\": '3',\r\n        \"weight\": 5\r\n      },\r\n      {\r\n        \"start\": '3',\r\n        \"end\": '4',\r\n        \"weight\": 15\r\n      },\r\n      {\r\n        \"start\": '4',\r\n        \"end\": '5',\r\n        \"weight\": 16\r\n      },\r\n      {\r\n        \"start\": '5',\r\n        \"end\": '6',\r\n        \"weight\": 12\r\n      },\r\n      {\r\n        \"start\": '6',\r\n        \"end\": '7',\r\n        \"weight\": 10\r\n      },\r\n      {\r\n        \"start\": '7',\r\n        \"end\": '8',\r\n        \"weight\": 5\r\n      },\r\n      {\r\n        \"start\": '8',\r\n        \"end\": '9',\r\n        \"weight\": 2\r\n      },\r\n      {\r\n        \"start\": '10',\r\n        \"end\": '11',\r\n        \"weight\": 3\r\n      },\r\n      {\r\n        \"start\": '11',\r\n        \"end\": '12',\r\n        \"weight\": 5\r\n      },\r\n      {\r\n        \"start\": '12',\r\n        \"end\": '13',\r\n        \"weight\": 3\r\n      },\r\n      {\r\n        \"start\": '12',\r\n        \"end\": '14',\r\n        \"weight\": 15\r\n      },\r\n      {\r\n        \"start\": '15',\r\n        \"end\": '8',\r\n        \"weight\": 6\r\n      },\r\n      {\r\n        \"start\": '8',\r\n        \"end\": '16',\r\n        \"weight\": 5\r\n      },\r\n      {\r\n        \"start\": '16',\r\n        \"end\": '17',\r\n        \"weight\": 16\r\n      },\r\n      {\r\n        \"start\": '15',\r\n        \"end\": '14',\r\n        \"weight\": 12\r\n      },\r\n      {\r\n        \"start\": '17',\r\n        \"end\": '0',\r\n        \"weight\": 15\r\n      },\r\n      {\r\n        \"start\": '0',\r\n        \"end\": '18',\r\n        \"weight\": 13\r\n      },\r\n      {\r\n        \"start\": '18',\r\n        \"end\": '19',\r\n        \"weight\": 17\r\n      },\r\n      {\r\n        \"start\": '20',\r\n        \"end\": '16',\r\n        \"weight\": 3\r\n      },\r\n      {\r\n        \"start\": '16',\r\n        \"end\": '21',\r\n        \"weight\": 2\r\n      },\r\n      {\r\n        \"start\": '7',\r\n        \"end\": '22',\r\n        \"weight\": 2\r\n      },\r\n      {\r\n        \"start\": '21',\r\n        \"end\": '7',\r\n        \"weight\": 5\r\n      },\r\n      {\r\n        \"start\": '22',\r\n        \"end\": '23',\r\n        \"weight\": 18\r\n      },\r\n      {\r\n        \"start\": '23',\r\n        \"end\": '24',\r\n        \"weight\": 15\r\n      },\r\n      {\r\n        \"start\": '24',\r\n        \"end\": '25',\r\n        \"weight\": 3\r\n      },\r\n      {\r\n        \"start\": '20',\r\n        \"end\": '17',\r\n        \"weight\": 20\r\n      },\r\n      {\r\n        \"start\": '17',\r\n        \"end\": '26',\r\n        \"weight\": 10\r\n      },\r\n      {\r\n        \"start\": '26',\r\n        \"end\": '27',\r\n        \"weight\": 5\r\n      },\r\n      {\r\n        \"start\": '5',\r\n        \"end\": '27',\r\n        \"weight\": 5\r\n      },\r\n      {\r\n        \"start\": '5',\r\n        \"end\": '23',\r\n        \"weight\": 5\r\n      },\r\n      {\r\n        \"start\": '23',\r\n        \"end\": '28',\r\n        \"weight\": 7\r\n      },\r\n      {\r\n        \"start\": '28',\r\n        \"end\": '14',\r\n        \"weight\": 2\r\n      },\r\n      {\r\n        \"start\": '14',\r\n        \"end\": '29',\r\n        \"weight\": 12\r\n      },\r\n      {\r\n        \"start\": '9',\r\n        \"end\": '29',\r\n        \"weight\": 6\r\n      },\r\n      {\r\n        \"start\": '1',\r\n        \"end\": '30',\r\n        \"weight\": 15\r\n      },\r\n      {\r\n        \"start\": '30',\r\n        \"end\": '26',\r\n        \"weight\": 25\r\n      },\r\n      {\r\n        \"start\": '26',\r\n        \"end\": '6',\r\n        \"weight\": 8\r\n      },\r\n      {\r\n        \"start\": '6',\r\n        \"end\": '22',\r\n        \"weight\": 3\r\n      },\r\n      {\r\n        \"start\": '22',\r\n        \"end\": '15',\r\n        \"weight\": 3\r\n      },\r\n      {\r\n        \"start\": '15',\r\n        \"end\": '29',\r\n        \"weight\": 2\r\n      },\r\n      {\r\n        \"start\": '29',\r\n        \"end\": '31',\r\n        \"weight\": 6\r\n      },\r\n      {\r\n        \"start\": '31',\r\n        \"end\": '21',\r\n        \"weight\": 5\r\n      },\r\n      {\r\n        \"start\": '21',\r\n        \"end\": '32',\r\n        \"weight\": 8\r\n      },\r\n      {\r\n        \"start\": '32',\r\n        \"end\": '28',\r\n        \"weight\": 12\r\n      },\r\n      {\r\n        \"start\": '28',\r\n        \"end\": '11',\r\n        \"weight\": 16\r\n      },\r\n      {\r\n        \"start\": '11',\r\n        \"end\": '13',\r\n        \"weight\": 12\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"nodes\": [\r\n      {\r\n        \"id\": '0',\r\n        \"label\": \"0\",\r\n        \"x\": 9,\r\n        \"y\": 0\r\n      },\r\n      {\r\n        \"id\": '1',\r\n        \"label\": \"1\",\r\n        \"x\": 7,\r\n        \"y\": 6\r\n      },\r\n      {\r\n        \"id\": '2',\r\n        \"label\": \"2\",\r\n        \"x\": 10,\r\n        \"y\": 4\r\n      },\r\n      {\r\n        \"id\": '3',\r\n        \"label\": \"3\",\r\n        \"x\": 4,\r\n        \"y\": 7\r\n      },\r\n      {\r\n        \"id\": '4',\r\n        \"label\": \"4\",\r\n        \"x\": 14,\r\n        \"y\": 7\r\n      },\r\n      {\r\n        \"id\": '5',\r\n        \"label\": \"5\",\r\n        \"x\": 7,\r\n        \"y\": 11\r\n      },\r\n      {\r\n        \"id\": '6',\r\n        \"label\": \"6\",\r\n        \"x\": 10,\r\n        \"y\": 11\r\n      },\r\n      {\r\n        \"id\": '7',\r\n        \"label\": \"7\",\r\n        \"x\": 9,\r\n        \"y\": 15\r\n      }\r\n    ],\r\n    \"edges\": [\r\n      {\r\n        \"start\": '0',\r\n        \"end\": '1',\r\n        \"weight\": 7\r\n      },\r\n      {\r\n        \"start\": '1',\r\n        \"end\": '3',\r\n        \"weight\": 9\r\n      },\r\n      {\r\n        \"start\": '1',\r\n        \"end\": '5',\r\n        \"weight\": 1\r\n      },\r\n      {\r\n        \"start\": '3',\r\n        \"end\": '5',\r\n        \"weight\": 4\r\n      },\r\n      {\r\n        \"start\": '5',\r\n        \"end\": '7',\r\n        \"weight\": 9\r\n      },\r\n      {\r\n        \"start\": '6',\r\n        \"end\": '7',\r\n        \"weight\": 2\r\n      },\r\n      {\r\n        \"start\": '6',\r\n        \"end\": '4',\r\n        \"weight\": 8\r\n      },\r\n      {\r\n        \"start\": '2',\r\n        \"end\": '6',\r\n        \"weight\": 5\r\n      },\r\n      {\r\n        \"start\": '4',\r\n        \"end\": '2',\r\n        \"weight\": 2\r\n      },\r\n      {\r\n        \"start\": '2',\r\n        \"end\": '0',\r\n        \"weight\": 6\r\n      },\r\n      {\r\n        \"start\": '0',\r\n        \"end\": '3',\r\n        \"weight\": 3\r\n      },\r\n      {\r\n        \"start\": '4',\r\n        \"end\": '7',\r\n        \"weight\": 7\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"nodes\": [\r\n      {\r\n        \"id\": '0',\r\n        \"label\": \"A\",\r\n        \"x\": 2,\r\n        \"y\": 3\r\n      },\r\n      {\r\n        \"id\": '1',\r\n        \"label\": \"B\",\r\n        \"x\": 6,\r\n        \"y\": 7\r\n      },\r\n      {\r\n        \"id\": '2',\r\n        \"label\": \"C\",\r\n        \"x\": 3,\r\n        \"y\": 12\r\n      },\r\n      {\r\n        \"id\": '3',\r\n        \"label\": \"D\",\r\n        \"x\": 10,\r\n        \"y\": 2\r\n      },\r\n      {\r\n        \"id\": '4',\r\n        \"label\": \"E\",\r\n        \"x\": 10,\r\n        \"y\": 10\r\n      },\r\n      {\r\n        \"id\": '5',\r\n        \"label\": \"F\",\r\n        \"x\": 15,\r\n        \"y\": 5\r\n      },\r\n      {\r\n        \"id\": '6',\r\n        \"label\": \"G\",\r\n        \"x\": 14,\r\n        \"y\": 9\r\n      }\r\n    ],\r\n    \"edges\": [\r\n      {\r\n        \"start\": '0',\r\n        \"end\": '1',\r\n        \"weight\": 2\r\n      },\r\n      {\r\n        \"start\": '2',\r\n        \"end\": '1',\r\n        \"weight\": 3\r\n      },\r\n      {\r\n        \"start\": '1',\r\n        \"end\": '4',\r\n        \"weight\": 2\r\n      },\r\n      {\r\n        \"start\": '1',\r\n        \"end\": '5',\r\n        \"weight\": 1\r\n      },\r\n      {\r\n        \"start\": '0',\r\n        \"end\": '3',\r\n        \"weight\": 3\r\n      },\r\n      {\r\n        \"start\": '3',\r\n        \"end\": '6',\r\n        \"weight\": 1\r\n      },\r\n      {\r\n        \"start\": '3',\r\n        \"end\": '5',\r\n        \"weight\": 4\r\n      },\r\n      {\r\n        \"start\": '4',\r\n        \"end\": '5',\r\n        \"weight\": 3\r\n      },\r\n      {\r\n        \"start\": '6',\r\n        \"end\": '5',\r\n        \"weight\": 7\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    \"nodes\": [\r\n      {\r\n        \"id\": '0',\r\n        \"label\": \"Tokyo\",\r\n        \"x\": 12,\r\n        \"y\": 9\r\n      },\r\n      {\r\n        \"id\": '1',\r\n        \"label\": \"Shinagawa\",\r\n        \"x\": 11,\r\n        \"y\": 12\r\n      },\r\n      {\r\n        \"id\": '2',\r\n        \"label\": \"Osaki\",\r\n        \"x\": 9,\r\n        \"y\": 12\r\n      },\r\n      {\r\n        \"id\": '3',\r\n        \"label\": \"Shinjuku\",\r\n        \"x\": 6,\r\n        \"y\": 7\r\n      },\r\n      {\r\n        \"id\": '4',\r\n        \"label\": \"Ikebukuro\",\r\n        \"x\": 7,\r\n        \"y\": 4\r\n      },\r\n      {\r\n        \"id\": '5',\r\n        \"label\": \"Nippori\",\r\n        \"x\": 11,\r\n        \"y\": 3\r\n      },\r\n      {\r\n        \"id\": '6',\r\n        \"label\": \"Ueno\",\r\n        \"x\": 12,\r\n        \"y\": 5\r\n      },\r\n      {\r\n        \"id\": '7',\r\n        \"label\": \"Akihabara\",\r\n        \"x\": 12,\r\n        \"y\": 7\r\n      },\r\n      {\r\n        \"id\": '8',\r\n        \"label\": \"Ochanomizu\",\r\n        \"x\": 10,\r\n        \"y\": 7\r\n      },\r\n      {\r\n        \"id\": '9',\r\n        \"label\": \"Yotsuya\",\r\n        \"x\": 8,\r\n        \"y\": 8\r\n      },\r\n      {\r\n        \"id\": '10',\r\n        \"label\": \"Kawasaki\",\r\n        \"x\": 9,\r\n        \"y\": 15\r\n      },\r\n      {\r\n        \"id\": '11',\r\n        \"label\": \"Musashi-Kosugi\",\r\n        \"x\": 7,\r\n        \"y\": 14\r\n      },\r\n      {\r\n        \"id\": '12',\r\n        \"label\": \"Yokohama\",\r\n        \"x\": 4,\r\n        \"y\": 15\r\n      },\r\n      {\r\n        \"id\": '13',\r\n        \"label\": \"Ofuna\",\r\n        \"x\": 1,\r\n        \"y\": 15\r\n      },\r\n      {\r\n        \"id\": '14',\r\n        \"label\": \"Nishi-Funabashi\",\r\n        \"x\": 15,\r\n        \"y\": 7\r\n      },\r\n      {\r\n        \"id\": '15',\r\n        \"label\": \"Chiba\",\r\n        \"x\": 16,\r\n        \"y\": 10\r\n      },\r\n      {\r\n        \"id\": '16',\r\n        \"label\": \"Shim-Matsudo\",\r\n        \"x\": 15,\r\n        \"y\": 2\r\n      },\r\n      {\r\n        \"id\": '17',\r\n        \"label\": \"Abiko\",\r\n        \"x\": 17,\r\n        \"y\": 1\r\n      },\r\n      {\r\n        \"id\": '18',\r\n        \"label\": \"Narita\",\r\n        \"x\": 19,\r\n        \"y\": 7\r\n      },\r\n      {\r\n        \"id\": '19',\r\n        \"label\": \"Sakura\",\r\n        \"x\": 18,\r\n        \"y\": 9\r\n      },\r\n      {\r\n        \"id\": '20',\r\n        \"label\": \"Akabane\",\r\n        \"x\": 8,\r\n        \"y\": 2\r\n      },\r\n      {\r\n        \"id\": '21',\r\n        \"label\": \"Musashi-Urawa\",\r\n        \"x\": 6,\r\n        \"y\": 1\r\n      },\r\n      {\r\n        \"id\": '22',\r\n        \"label\": \"Omiya\",\r\n        \"x\": 4,\r\n        \"y\": 0\r\n      },\r\n      {\r\n        \"id\": '23',\r\n        \"label\": \"Takasaki\",\r\n        \"x\": 0,\r\n        \"y\": 0\r\n      },\r\n      {\r\n        \"id\": '24',\r\n        \"label\": \"Kawagoe\",\r\n        \"x\": 2,\r\n        \"y\": 1\r\n      },\r\n      {\r\n        \"id\": '25',\r\n        \"label\": \"Nishi-Kokubunji\",\r\n        \"x\": 3,\r\n        \"y\": 6\r\n      },\r\n      {\r\n        \"id\": '26',\r\n        \"label\": \"Tachikawa\",\r\n        \"x\": 2,\r\n        \"y\": 7\r\n      },\r\n      {\r\n        \"id\": '27',\r\n        \"label\": \"Hachioji\",\r\n        \"x\": 0,\r\n        \"y\": 8\r\n      },\r\n      {\r\n        \"id\": '28',\r\n        \"label\": \"Haijima\",\r\n        \"x\": 0,\r\n        \"y\": 6\r\n      },\r\n      {\r\n        \"id\": '29',\r\n        \"label\": \"Komagawa\",\r\n        \"x\": 1,\r\n        \"y\": 3\r\n      },\r\n      {\r\n        \"id\": '30',\r\n        \"label\": \"Hashimoto\",\r\n        \"x\": 0,\r\n        \"y\": 10\r\n      },\r\n      {\r\n        \"id\": '31',\r\n        \"label\": \"Fuchuhommachi\",\r\n        \"x\": 3,\r\n        \"y\": 9\r\n      },\r\n      {\r\n        \"id\": '32',\r\n        \"label\": \"Soga\",\r\n        \"x\": 16,\r\n        \"y\": 12\r\n      },\r\n      {\r\n        \"id\": '33',\r\n        \"label\": \"Kisarazu\",\r\n        \"x\": 15,\r\n        \"y\": 15\r\n      },\r\n      {\r\n        \"id\": '34',\r\n        \"label\": \"Oami\",\r\n        \"x\": 18,\r\n        \"y\": 14\r\n      },\r\n      {\r\n        \"id\": '35',\r\n        \"label\": \"Naruto\",\r\n        \"x\": 19,\r\n        \"y\": 12\r\n      },\r\n      {\r\n        \"id\": '36',\r\n        \"label\": \"Oyama\",\r\n        \"x\": 8,\r\n        \"y\": 0\r\n      },\r\n      {\r\n        \"id\": '37',\r\n        \"label\": \"Utsunomiya\",\r\n        \"x\": 11,\r\n        \"y\": 0\r\n      }\r\n    ],\r\n    \"edges\": [\r\n      {\r\n        \"start\": '0',\r\n        \"end\": '1',\r\n        \"weight\": 10\r\n      },\r\n      {\r\n        \"start\": '2',\r\n        \"end\": '1',\r\n        \"weight\": 3\r\n      },\r\n      {\r\n        \"start\": '2',\r\n        \"end\": '3',\r\n        \"weight\": 12\r\n      },\r\n      {\r\n        \"start\": '3',\r\n        \"end\": '4',\r\n        \"weight\": 7\r\n      },\r\n      {\r\n        \"start\": '4',\r\n        \"end\": '5',\r\n        \"weight\": 13\r\n      },\r\n      {\r\n        \"start\": '5',\r\n        \"end\": '6',\r\n        \"weight\": 4\r\n      },\r\n      {\r\n        \"start\": '6',\r\n        \"end\": '7',\r\n        \"weight\": 3\r\n      },\r\n      {\r\n        \"start\": '7',\r\n        \"end\": '0',\r\n        \"weight\": 4\r\n      },\r\n      {\r\n        \"start\": '7',\r\n        \"end\": '8',\r\n        \"weight\": 2\r\n      },\r\n      {\r\n        \"start\": '0',\r\n        \"end\": '8',\r\n        \"weight\": 4\r\n      },\r\n      {\r\n        \"start\": '9',\r\n        \"end\": '8',\r\n        \"weight\": 5\r\n      },\r\n      {\r\n        \"start\": '9',\r\n        \"end\": '3',\r\n        \"weight\": 4\r\n      },\r\n      {\r\n        \"start\": '1',\r\n        \"end\": '10',\r\n        \"weight\": 8\r\n      },\r\n      {\r\n        \"start\": '1',\r\n        \"end\": '11',\r\n        \"weight\": 10\r\n      },\r\n      {\r\n        \"start\": '2',\r\n        \"end\": '11',\r\n        \"weight\": 10\r\n      },\r\n      {\r\n        \"start\": '11',\r\n        \"end\": '12',\r\n        \"weight\": 12\r\n      },\r\n      {\r\n        \"start\": '10',\r\n        \"end\": '12',\r\n        \"weight\": 8\r\n      },\r\n      {\r\n        \"start\": '13',\r\n        \"end\": '12',\r\n        \"weight\": 15\r\n      },\r\n      {\r\n        \"start\": '7',\r\n        \"end\": '14',\r\n        \"weight\": 27\r\n      },\r\n      {\r\n        \"start\": '0',\r\n        \"end\": '14',\r\n        \"weight\": 30\r\n      },\r\n      {\r\n        \"start\": '14',\r\n        \"end\": '15',\r\n        \"weight\": 24\r\n      },\r\n      {\r\n        \"start\": '15',\r\n        \"end\": '19',\r\n        \"weight\": 18\r\n      },\r\n      {\r\n        \"start\": '19',\r\n        \"end\": '18',\r\n        \"weight\": 13\r\n      },\r\n      {\r\n        \"start\": '18',\r\n        \"end\": '17',\r\n        \"weight\": 41\r\n      },\r\n      {\r\n        \"start\": '17',\r\n        \"end\": '16',\r\n        \"weight\": 13\r\n      },\r\n      {\r\n        \"start\": '16',\r\n        \"end\": '5',\r\n        \"weight\": 27\r\n      },\r\n      {\r\n        \"start\": '5',\r\n        \"end\": '20',\r\n        \"weight\": 17\r\n      },\r\n      {\r\n        \"start\": '4',\r\n        \"end\": '20',\r\n        \"weight\": 10\r\n      },\r\n      {\r\n        \"start\": '20',\r\n        \"end\": '21',\r\n        \"weight\": 10\r\n      },\r\n      {\r\n        \"start\": '21',\r\n        \"end\": '22',\r\n        \"weight\": 11\r\n      },\r\n      {\r\n        \"start\": '21',\r\n        \"end\": '16',\r\n        \"weight\": 31\r\n      },\r\n      {\r\n        \"start\": '22',\r\n        \"end\": '23',\r\n        \"weight\": 72\r\n      },\r\n      {\r\n        \"start\": '22',\r\n        \"end\": '24',\r\n        \"weight\": 23\r\n      },\r\n      {\r\n        \"start\": '3',\r\n        \"end\": '25',\r\n        \"weight\": 25\r\n      },\r\n      {\r\n        \"start\": '26',\r\n        \"end\": '25',\r\n        \"weight\": 5\r\n      },\r\n      {\r\n        \"start\": '21',\r\n        \"end\": '25',\r\n        \"weight\": 25\r\n      },\r\n      {\r\n        \"start\": '27',\r\n        \"end\": '26',\r\n        \"weight\": 10\r\n      },\r\n      {\r\n        \"start\": '26',\r\n        \"end\": '28',\r\n        \"weight\": 11\r\n      },\r\n      {\r\n        \"start\": '27',\r\n        \"end\": '28',\r\n        \"weight\": 13\r\n      },\r\n      {\r\n        \"start\": '29',\r\n        \"end\": '28',\r\n        \"weight\": 31\r\n      },\r\n      {\r\n        \"start\": '29',\r\n        \"end\": '24',\r\n        \"weight\": 18\r\n      },\r\n      {\r\n        \"start\": '23',\r\n        \"end\": '29',\r\n        \"weight\": 86\r\n      },\r\n      {\r\n        \"start\": '27',\r\n        \"end\": '30',\r\n        \"weight\": 12\r\n      },\r\n      {\r\n        \"start\": '30',\r\n        \"end\": '13',\r\n        \"weight\": 73\r\n      },\r\n      {\r\n        \"start\": '30',\r\n        \"end\": '12',\r\n        \"weight\": 39\r\n      },\r\n      {\r\n        \"start\": '26',\r\n        \"end\": '31',\r\n        \"weight\": 12\r\n      },\r\n      {\r\n        \"start\": '25',\r\n        \"end\": '31',\r\n        \"weight\": 5\r\n      },\r\n      {\r\n        \"start\": '31',\r\n        \"end\": '11',\r\n        \"weight\": 30\r\n      },\r\n      {\r\n        \"start\": '16',\r\n        \"end\": '14',\r\n        \"weight\": 16\r\n      },\r\n      {\r\n        \"start\": '0',\r\n        \"end\": '32',\r\n        \"weight\": 42\r\n      },\r\n      {\r\n        \"start\": '15',\r\n        \"end\": '32',\r\n        \"weight\": 6\r\n      },\r\n      {\r\n        \"start\": '32',\r\n        \"end\": '33',\r\n        \"weight\": 32\r\n      },\r\n      {\r\n        \"start\": '32',\r\n        \"end\": '34',\r\n        \"weight\": 18\r\n      },\r\n      {\r\n        \"start\": '34',\r\n        \"end\": '35',\r\n        \"weight\": 20\r\n      },\r\n      {\r\n        \"start\": '19',\r\n        \"end\": '35',\r\n        \"weight\": 27\r\n      },\r\n      {\r\n        \"start\": '22',\r\n        \"end\": '36',\r\n        \"weight\": 48\r\n      },\r\n      {\r\n        \"start\": '36',\r\n        \"end\": '37',\r\n        \"weight\": 27\r\n      }\r\n    ]\r\n  }\r\n];","// Code implemented with reference from:\r\n// Article by Maiko Miyazaki:\r\n//     Completed JavaScript Data Structure Course, and Here is What I Learned About Graph (+ Dijkstra Algorithm)\r\n// Article link:\r\n//     https://dev.to/maikomiyazaki/completed-javascript-data-structure-course-and-here-is-what-i-learned-about-graph-dijkstra-algorithm-57n8\r\n\r\nexport interface AdjacencyList {\r\n  [key: string]: {\r\n    [key: string]: number\r\n  }\r\n};\r\n\r\nexport class WeightedGraph {\r\n  adjacencyList: AdjacencyList;\r\n\r\n  constructor() {\r\n    this.adjacencyList = {};\r\n  }\r\n\r\n  addNode = (node: string): void => {\r\n    if (!this.adjacencyList[node]) {\r\n      this.adjacencyList[node] = {};\r\n    }\r\n  }\r\n\r\n  addEdge = (node1: string, node2: string, weight: number): void => {\r\n    if (!this.adjacencyList[node1]) { this.addNode(node1); }\r\n    if (!this.adjacencyList[node2]) { this.addNode(node2); }\r\n\r\n    this.adjacencyList[node1][node2] = weight;\r\n    this.adjacencyList[node2][node1] = weight;\r\n  }\r\n\r\n  removeEdge = (node1: string, node2: string): void => {\r\n    delete this.adjacencyList[node1][node2];\r\n    delete this.adjacencyList[node2][node1];\r\n    // this.adjacencyList[node1] = this.adjacencyList[node1].filter(node => node !== node2);\r\n    // this.adjacencyList[node2] = this.adjacencyList[node2].filter(node => node !== node1);\r\n  }\r\n\r\n  removeNode = (node: string): void => {\r\n    for (let i in this.adjacencyList[node]) {\r\n      this.removeEdge(node, i);\r\n    }\r\n    // while (this.adjacencyList[node]) {\r\n    //   const adjacentNode = this.adjacencyList[node].pop();\r\n    //   this.removeEdge(node, adjacentNode);\r\n    // }\r\n    delete this.adjacencyList[node];\r\n  }\r\n\r\n  printAdjList = (): void => {\r\n    console.log(this.adjacencyList);\r\n  }\r\n\r\n  resetGraph = (): void => {\r\n    this.adjacencyList = {};\r\n  }\r\n}\r\n","export interface QueueItem {\r\n  val: string;\r\n  priority: number;\r\n};\r\n\r\nexport class PriorityQueue {\r\n  // Keeps track which route has the total cheapest cost\r\n  values: QueueItem[] = [];\r\n\r\n  // constructor() {}\r\n\r\n  enqueue = (val: string, priority: number): void => {\r\n    this.values.push({ val, priority });\r\n    this.sort();\r\n  }\r\n\r\n  dequeue = (): QueueItem | undefined => {\r\n    return this.values.shift();\r\n  }\r\n\r\n  private sort = (): void => {\r\n    this.values.sort((a, b) => a.priority - b.priority);\r\n  }\r\n}","// Algorithm implemented with reference from:\r\n// Article by Maiko Miyazaki:\r\n//     Completed JavaScript Data Structure Course, and Here is What I Learned About Graph (+ Dijkstra Algorithm)\r\n// Article link:\r\n//     https://dev.to/maikomiyazaki/completed-javascript-data-structure-course-and-here-is-what-i-learned-about-graph-dijkstra-algorithm-57n8\r\n\r\nimport { AdjacencyList } from './WeightedGraph';\r\nimport { PriorityQueue } from './PriorityQueue';\r\n\r\ninterface State {\r\n  /**\r\n   * algoSteps.state.flag\r\n   * 0: Initialised lists\r\n   * \r\n   * 1: Top of while-loop\r\n   *     Loop through neighbours\r\n   *     2: Calculated cost to neighbour\r\n   *         If better cost:\r\n   *         3: Lists before update\r\n   *         4: Updated lists\r\n   *         Else:\r\n   *         5: No update\r\n   *     6: Solution found\r\n   *     7: Push nodes to results array\r\n   * 8: Return path solution\r\n   * 9: No path solution found\r\n   */\r\n\r\n  flag: number;\r\n  result?: string[];\r\n  neighbour?: string;\r\n  costToNeighbour?: number;\r\n  bestCost?: number\r\n};\r\n\r\nexport interface AlgoStep {\r\n  // List 1 - Record vertices with numbers that represent total cost to start\r\n  costFromStartTo: { [key: string]: number };\r\n  // List 2 - tells you which node to check next\r\n  checkList: PriorityQueue;\r\n  // List 3 - Record vertices previously visited to find the vertex's current cost\r\n  prevVisited: { [key: string]: string | null };\r\n\r\n  current: string | null;\r\n  state: State;\r\n};\r\n\r\nexport class Dijkstra {\r\n  costFromStartTo: { [key: string]: number } = {};\r\n  checkList = new PriorityQueue();\r\n  prevVisited: { [key: string]: string | null } = {};\r\n  current: string | null = null;\r\n\r\n  result: string[] = [];\r\n  algoSteps: AlgoStep[] = [];\r\n\r\n  constructor(\r\n    public adjacencyList: AdjacencyList,\r\n    public start: string,\r\n    public finish: string\r\n    ) {\r\n    // Note that JavaScript processes object keys as strings even if they're given integers.\r\n    // Thus start and finish arguments should be passed in as strings.\r\n    this.initLists();\r\n  }\r\n\r\n  initLists = (): void => {\r\n    // Initialise lists with Infinity and null values\r\n    for (const node in this.adjacencyList) {\r\n      if (node === this.start) {\r\n        this.costFromStartTo[node] = 0;\r\n        this.checkList.enqueue(node, 0);\r\n      } else {\r\n        this.costFromStartTo[node] = Infinity;\r\n      }\r\n      this.prevVisited[node] = null;\r\n    };\r\n    this.pushStateToSteps({ flag: 0 });\r\n  }\r\n\r\n  run = (): string[] => {\r\n    while (this.checkList.values.length) {\r\n      this.current = this.checkList.values[0].val;  // Read the value first to keep 'priority' in state\r\n\r\n      this.pushStateToSteps({ flag: 1 });\r\n\r\n      this.checkList.dequeue();  // Dequeue afterwards\r\n\r\n      if (this.current === this.finish) {\r\n        // Solution found\r\n        this.pushStateToSteps({ flag: 6 });\r\n\r\n        while (this.current && this.prevVisited[this.current]) {\r\n          this.result.push(this.current);\r\n          this.pushStateToSteps({ flag: 7, result: JSON.parse(JSON.stringify(this.result)) });\r\n          this.current = this.prevVisited[this.current];\r\n        }\r\n\r\n        this.result.push(this.current !);\r\n        this.pushStateToSteps({ flag: 7, result: JSON.parse(JSON.stringify(this.result)) });\r\n        this.result = this.result.reverse();\r\n        break;\r\n\r\n      } else {\r\n        for (const neighbour in this.adjacencyList[this.current]) {\r\n          let costToNeighbour = this.costFromStartTo[this.current] + this.adjacencyList[this.current][neighbour];\r\n          this.pushStateToSteps({ flag: 2, neighbour, costToNeighbour });\r\n\r\n          if (costToNeighbour < this.costFromStartTo[neighbour]) {\r\n            // Update list values for the current-neighbour node.\r\n            this.pushStateToSteps({ flag: 3, neighbour, costToNeighbour });\r\n            this.costFromStartTo[neighbour] = costToNeighbour;\r\n            this.prevVisited[neighbour] = this.current;\r\n            this.checkList.enqueue(neighbour, costToNeighbour);\r\n            this.pushStateToSteps({ flag: 4, neighbour, costToNeighbour });\r\n          } else {\r\n            // Don't update list values\r\n            this.pushStateToSteps({ flag: 5, neighbour, costToNeighbour });\r\n          }\r\n        };\r\n      }  // end if-else\r\n    }  // end-while\r\n\r\n    if (this.result.length === 0) {\r\n      this.pushStateToSteps({ flag: 9 });\r\n    } else {\r\n      this.pushStateToSteps({ flag: 8, bestCost: this.costFromStartTo[this.finish] });\r\n    }\r\n\r\n    return this.result;\r\n  }\r\n\r\n  pushStateToSteps = (state: State) => {\r\n    this.algoSteps.push({\r\n      costFromStartTo: JSON.parse(JSON.stringify(this.costFromStartTo)),\r\n      checkList: JSON.parse(JSON.stringify(this.checkList)),\r\n      prevVisited: JSON.parse(JSON.stringify(this.prevVisited)),\r\n      current: this.current,\r\n      state: state\r\n    });\r\n  }\r\n}\r\n","export const uiConfig = {\r\n  canvasWidth: 850,\r\n  canvasHeight: 600,\r\n  circleRadius: 16,\r\n  gridCircleRadius: 8,\r\n  gridCols: 20,\r\n  gridRows: 16\r\n};\r\n","import { GraphNode, GraphEdge } from '../controller/GraphStructure';\r\nimport { NodeGrid } from './NodeGrid';\r\nimport { uiConfig } from './UiConfig';\r\n\r\nexport class CanvasGraph {\r\n  config = uiConfig;\r\n\r\n  constructor(\r\n    public canvas: SVGElement,\r\n    public nodeGrid: NodeGrid\r\n  ) {}\r\n\r\n  drawGraph = (nodes: GraphNode[], edges: GraphEdge[], graphClickHandler: { (e: Event): void }): void => {\r\n    const svgns = \"http://www.w3.org/2000/svg\";\r\n    const group = document.createElementNS(svgns, 'g');\r\n    group.id = 'graph-group';\r\n    this.canvas.appendChild(group);\r\n    group.addEventListener('click', graphClickHandler);\r\n\r\n    // Draw the edges, then the nodes\r\n    edges.forEach(edge => {\r\n      const startNode = nodes.filter(node => node.id === edge.start)[0];\r\n      const endNode = nodes.filter(node => node.id === edge.end)[0];\r\n      this.drawEdge(startNode, endNode, edge);\r\n    });\r\n\r\n    nodes.forEach(node => this.drawNode(node));\r\n  }\r\n\r\n  drawNode = (node: GraphNode): void => {\r\n    const svgns = \"http://www.w3.org/2000/svg\";\r\n    const nodeGroup = document.createElementNS(svgns, 'g');\r\n    const circle = document.createElementNS(svgns, 'circle');\r\n    const text = document.createElementNS(svgns, 'text');\r\n\r\n    const { id, label, x, y } = node;\r\n    const [x_pos, y_pos] = this.nodeGrid.getGridPos(y, x);\r\n\r\n    circle.setAttributeNS(null, 'cx', String(x_pos));\r\n    circle.setAttributeNS(null, 'cy', String(y_pos));\r\n    circle.setAttributeNS(null, 'r', String(this.config.circleRadius));\r\n\r\n    text.setAttributeNS(null, 'x', String(x_pos));\r\n    text.setAttributeNS(null, 'y', String(y_pos + 6));\r\n    text.setAttributeNS(null, 'text-anchor', 'middle');\r\n    text.innerHTML = label;\r\n\r\n    nodeGroup.classList.add('graph-node');\r\n    nodeGroup.appendChild(circle);\r\n    nodeGroup.appendChild(text);\r\n    nodeGroup.dataset.nodeId = id;\r\n\r\n    document.getElementById('graph-group') !.appendChild(nodeGroup);\r\n  }\r\n\r\n  drawEdge = (start: GraphNode, end: GraphNode, edge: GraphEdge) => {\r\n    const svgns = \"http://www.w3.org/2000/svg\";\r\n    const edgeGroup = document.createElementNS(svgns, 'g');\r\n    const line = document.createElementNS(svgns, 'line');\r\n    const text = document.createElementNS(svgns, 'text');\r\n\r\n    const [x1, y1] = this.nodeGrid.getGridPos(start.y, start.x);\r\n    const [x2, y2] = this.nodeGrid.getGridPos(end.y, end.x);\r\n    const weight = edge.weight;\r\n\r\n    line.setAttributeNS(null, 'x1', String(x1));\r\n    line.setAttributeNS(null, 'y1', String(y1));\r\n    line.setAttributeNS(null, 'x2', String(x2));\r\n    line.setAttributeNS(null, 'y2', String(y2));\r\n\r\n    // Draw text labels 5/13 = 38% the distance along the edge line:\r\n    text.setAttributeNS(null, 'x', String((8*x1 + 5*x2) / 13));\r\n    text.setAttributeNS(null, 'y', String((8*y1 + 5*y2) / 13 + 6));\r\n    text.setAttributeNS(null, 'text-anchor', 'middle');\r\n    text.innerHTML = String(weight);\r\n\r\n    edgeGroup.classList.add('graph-edge');\r\n    edgeGroup.appendChild(line);\r\n    edgeGroup.appendChild(text);\r\n    edgeGroup.dataset.startId = start.id;\r\n    edgeGroup.dataset.endId = end.id;\r\n\r\n    document.getElementById('graph-group') !.appendChild(edgeGroup);\r\n  }\r\n}\r\n","import { uiConfig } from \"./UiConfig\";\r\n\r\nexport class NodeGrid {\r\n  config = uiConfig;\r\n\r\n  createGrid = (canvas: SVGElement, gridClickHandler: { (e: Event): void }): void => {\r\n    if (!canvas) return;\r\n\r\n    const svgns = \"http://www.w3.org/2000/svg\";\r\n    const group = document.createElementNS(svgns, 'g');\r\n    group.id = 'grid-group';\r\n    group.addEventListener('click', gridClickHandler);\r\n\r\n    for (let i = 0; i < this.config.gridRows; i++) {  // rows\r\n      for (let j = 0; j < this.config.gridCols; j++) {  // cols\r\n        const [x, y] = this.getGridPos(i, j);\r\n\r\n        const circle = document.createElementNS(svgns, 'circle');\r\n        circle.setAttributeNS(null, 'cx', String(x));\r\n        circle.setAttributeNS(null, 'cy', String(y));\r\n        circle.setAttributeNS(null, 'r', String(this.config.gridCircleRadius));\r\n        circle.classList.add('grid-circle');\r\n        circle.dataset.gridX = String(j);\r\n        circle.dataset.gridY = String(i);\r\n\r\n        group.appendChild(circle);\r\n      }\r\n    }\r\n\r\n    canvas.insertBefore(group, canvas.childNodes[0]);\r\n  }\r\n\r\n  getGridPos = (row: number, col: number): [number, number] => {\r\n    // Pass in zero-indexed x/y grid position\r\n    const x = (col+1) * this.config.canvasWidth / (this.config.gridCols + 1);\r\n    const y = (row+1) * this.config.canvasHeight / (this.config.gridRows + 1);\r\n    return [x, y];\r\n  }\r\n\r\n  toggleGrid = (show: boolean): void => {\r\n    const gridGroup = document.getElementById('grid-group') !;\r\n    if (show) {\r\n      gridGroup.style.display = 'block';\r\n    } else {\r\n      gridGroup.style.display = 'none'; \r\n    }\r\n  }\r\n}\r\n","export class TextDescription {\r\n  textElement: HTMLElement;\r\n\r\n  constructor(selector: string) {\r\n    this.textElement = document.querySelector(selector) !;\r\n  }\r\n\r\n  setTextDescription = (html=''): void => {\r\n    // Change the heading above the graph-table.\r\n    this.textElement.innerHTML = html;\r\n  }\r\n}\r\n","import { GraphNode, GraphEdge } from './GraphStructure';\r\n\r\nexport const getLabelOfNodeFromId = (nodes: GraphNode[], id: string): string => {\r\n  return nodes.filter(node => node.id === id)[0].label;\r\n};\r\n\r\nexport const preventNonNumberKeydown = (e: KeyboardEvent) => {\r\n  const allowedChars = '0123456789';\r\n\r\n  const contains = (stringValue: string, charValue: string) => {\r\n    return stringValue.indexOf(charValue) > -1;\r\n  }\r\n\r\n  let invalidKey =\r\n    e.key.length === 1 && !contains(allowedChars, e.key) ||\r\n    e.key === '.' && contains((e.target as HTMLInputElement).value, '.');\r\n\r\n  invalidKey && e.preventDefault();\r\n};\r\n\r\nexport const checkIfNodeExists = (nodes: GraphNode[], label: string): boolean => {\r\n  const currentNodes = [...nodes.map(node => node.label)];\r\n  for (let i = 0; i < currentNodes.length; i++) {\r\n    if (label === currentNodes[i]) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const checkIfEdgeExists = (edges: GraphEdge[], start: string, end: string): boolean => {\r\n  // Check that an edge with same start and end doesn't already exist in the currentGraph.\r\n  let exists = false;\r\n  for (let i = 0; i < edges.length; i++) {\r\n    const edge = edges[i];\r\n    if (\r\n      (start === edge.start && end === edge.end) ||\r\n      (start === edge.end && end === edge.start)\r\n    ) {\r\n      // [TODO] Here we exit if it exists, but maybe instead just update the weight value.\r\n      // console.log('edge alr exists');\r\n      exists = true;\r\n    }\r\n    if (exists) break;\r\n  }\r\n  // console.log('edge doesnt exist');\r\n  return exists;\r\n};\r\n","import { GraphNode } from '../controller/GraphStructure';\r\nimport { QueueItem } from '../model/PriorityQueue';\r\nimport { AlgoStep } from '../model/Dijkstra';\r\nimport { getLabelOfNodeFromId } from '../controller/utils';\r\n\r\nexport class Table {\r\n  constructor(public tableElement: string) {}\r\n\r\n  drawTable = (nodes: GraphNode[]): void => {\r\n    // This is only for populating the table with the id and labels of nodes.\r\n    const tbody = document.querySelector(this.tableElement + ' tbody') !;\r\n    tbody.innerHTML = '';\r\n    nodes.forEach(node => {\r\n      const tableRow = document.createElement('tr');\r\n      tableRow.innerHTML = `\r\n        <td>${node.id}</td>\r\n        <td>${node.label}</td>\r\n        <td></td>\r\n        <td></td>\r\n        <td></td>\r\n      `;\r\n      tbody.appendChild(tableRow);\r\n    });\r\n  }\r\n  \r\n  updateTable = (nodes: GraphNode[], step: AlgoStep, algoStart: GraphNode): void => {\r\n    // Extract the required data from the dijkstra algo step:\r\n    const { costFromStartTo, checkList, prevVisited, current, state } = step;\r\n    const priorities: { [key: string]: QueueItem } = {};\r\n    checkList.values.forEach(valPrio => priorities[valPrio.val] = valPrio);\r\n\r\n    const tbody = document.querySelector(this.tableElement + ' tbody') !;\r\n    tbody.innerHTML = '';\r\n    nodes.forEach((node) => {\r\n      const { id, label } = node;\r\n      const cost = id === algoStart.id ? 0 : costFromStartTo[id] || Infinity;\r\n      const priority = priorities[id] ? priorities[id].priority : '';\r\n      const prevIdStr = prevVisited[id] ? `(#${prevVisited[id]})` : '';\r\n      const prevLabel = prevVisited[id] ? getLabelOfNodeFromId(nodes, prevVisited[id] !) : '';\r\n\r\n      const tableRow = document.createElement('tr');\r\n      tableRow.innerHTML = `\r\n        <td>${id}</td>\r\n        <td>${label}</td>\r\n        <td>${cost}</td>\r\n        <td>${priority}</td>\r\n        <td>${prevIdStr} ${prevLabel}</td>\r\n      `;\r\n      if (current === id) {\r\n        tableRow.classList.add('current-node');\r\n      }\r\n      if (state.neighbour && state.neighbour === id) {\r\n        tableRow.classList.add('neighbour-node');\r\n      }\r\n      tbody.appendChild(tableRow);\r\n    });\r\n  }\r\n}\r\n","import { GraphStructure, GraphNode } from '../controller/GraphStructure';\r\nimport { AlgoStep } from '../model/Dijkstra';\r\n\r\nexport class Graph {\r\n  updateGraph = (graph: GraphStructure, step: AlgoStep): void => {\r\n    const { nodes, edges } = graph;\r\n    const { current, state } = step;\r\n\r\n    this.removeHighlightfromAllNodes();\r\n    this.removeHighlightfromAllEdges();\r\n\r\n    // Highlight nodes\r\n    nodes.forEach((node) => {\r\n      const { id } = node;\r\n      if (current === id) {\r\n        const nodeElement = document.querySelector(`[data-node-id='${id}']`) !;\r\n        nodeElement.classList.add('current-node');\r\n      }\r\n      if (state.neighbour && state.neighbour === id) {\r\n        const nodeElement = document.querySelector(`[data-node-id='${id}']`) !;\r\n        nodeElement.classList.add('neighbour-node');\r\n      }\r\n    });\r\n\r\n    if (!state.neighbour) {\r\n      return;\r\n    }\r\n\r\n    // Highlight edges\r\n    edges.forEach((edge) => {\r\n      const neighbourId = state.neighbour;\r\n      const currentId = current;\r\n      if (currentId === edge.start && neighbourId === edge.end) {\r\n        this.addGraphEdgeHighlight(currentId, neighbourId);\r\n      } else if (currentId === edge.end && neighbourId === edge.start) {\r\n        this.addGraphEdgeHighlight(neighbourId, currentId);\r\n      }\r\n    });\r\n  }\r\n\r\n  updateGraphLast = (result: GraphNode[]): void => {\r\n    this.removeHighlightfromAllNodes();\r\n    this.removeHighlightfromAllEdges();\r\n\r\n    // Highlight nodes\r\n    result.forEach((node, index) => {\r\n      const { id } = node;\r\n      const nodeElement = document.querySelector(`[data-node-id='${id}']`) !;\r\n      if (index === 0) {\r\n        nodeElement.classList.add('current-node');\r\n      } else if (index === result.length - 1) {\r\n        nodeElement.classList.add('special-node');\r\n      } else {\r\n        nodeElement.classList.add('neighbour-node');\r\n      }\r\n    });\r\n\r\n    // Highlight edges\r\n    for (let i = 0; i < result.length - 1; i++) {\r\n      const id1 = result[i].id;\r\n      const id2 = result[i+1].id;\r\n\r\n      this.addGraphEdgeHighlight(id1, id2);\r\n      this.addGraphEdgeHighlight(id2, id1);\r\n    }\r\n  }\r\n\r\n  addGraphEdgeHighlight = (start: string, end: string): void => {\r\n    const edgeElement = document.querySelector(`[data-start-id='${start}'][data-end-id='${end}']`);\r\n    if (edgeElement) {\r\n      edgeElement.classList.add('connection');\r\n    }\r\n  }\r\n\r\n  removeHighlightfromAllNodes = (): void => {\r\n    const nodeElements = document.querySelectorAll('.graph-node');\r\n    nodeElements.forEach((nodeElem) => {\r\n      nodeElem.classList.remove('current-node');\r\n      nodeElem.classList.remove('neighbour-node');\r\n      nodeElem.classList.remove('special-node');\r\n    });\r\n  }\r\n\r\n  removeHighlightfromAllEdges = (): void => {\r\n    const edgeElements = document.querySelectorAll('.graph-edge');\r\n    edgeElements.forEach((edgeElem) => {\r\n      edgeElem.classList.remove('connection');\r\n    });\r\n  }\r\n};","export class ButtonHandler {\r\n  constructor(public runBtn: string) {}\r\n\r\n  darkenButton = (button: Element | string): void => {\r\n    if (button instanceof Element) {\r\n      button.classList.add('darken-3');\r\n    } else {\r\n      const element = document.querySelector(button) !;\r\n      element.classList.add('darken-3');\r\n    }\r\n  }\r\n\r\n  resetButton = (button: Element | string): void => {\r\n    if (button instanceof Element) {\r\n      button.classList.remove('darken-3');\r\n    } else {\r\n      const element = document.querySelector(button) !;\r\n      element.classList.remove('darken-3');\r\n    }\r\n  }\r\n\r\n  toggleButtons = (btnElements: HTMLElement[], enable: boolean): void => {\r\n    if (enable) {\r\n      btnElements.forEach((button) => {\r\n        button.classList.remove('disabled');\r\n      });\r\n    } else {\r\n      btnElements.forEach((button) => {\r\n        button.classList.add('disabled');\r\n      });\r\n    }\r\n  }\r\n\r\n  toggleButton = (btnElement: HTMLElement, enable: boolean): void => {\r\n    if (enable) {\r\n      btnElement.classList.remove('disabled');\r\n    } else {\r\n      btnElement.classList.add('disabled');\r\n    }\r\n  }\r\n\r\n  toggleRunBtn = (mode: ('play' | 'pause')): void => {\r\n    const runBtn = document.querySelector(this.runBtn) !;\r\n\r\n    if (mode === 'play') {\r\n      runBtn.children[0].innerHTML = 'play_arrow';\r\n      this.resetButton(runBtn);\r\n    } else if (mode === 'pause') {\r\n      runBtn.children[0].innerHTML = 'pause';\r\n      this.darkenButton(runBtn);\r\n    }\r\n  }\r\n}\r\n","export const initModal = (selector: string, options={}): void => {\r\n  M.Modal.init((document.querySelector(selector) !), options);\r\n};\r\n\r\nexport const openModal = (selector: string): void => {\r\n  M.Modal.getInstance(document.querySelector(selector) !).open();\r\n};\r\n\r\nexport const closeModal = (selector: string): void => {\r\n  M.Modal.getInstance(document.querySelector(selector) !).close();\r\n};\r\n","import { CanvasGraph } from './CanvasGraph';\r\nimport { NodeGrid } from './NodeGrid';\r\nimport { TextDescription } from './TextDescription';\r\nimport { Table } from './Table';\r\nimport { Graph } from './Graph';\r\nimport { ButtonHandler } from './ButtonHandler';\r\nimport { uiConfig } from './UiConfig';\r\nimport { initModal, openModal } from './ModalFuncs';\r\n\r\nimport { GraphStructure, GraphNode, GraphEdge } from '../controller/GraphStructure';\r\nimport { APP_STATES } from '../controller/AppStates';\r\nimport { AlgoStep } from '../model/Dijkstra';\r\n\r\nexport class UICtrl {\r\n  selectors: { [key: string ]: string };\r\n  canvas: SVGElement;\r\n  canvasGraph: CanvasGraph;\r\n  nodeGrid: NodeGrid;\r\n  table: Table;\r\n  graph: Graph;\r\n  textDescription: TextDescription;\r\n  btnHandler: ButtonHandler;\r\n\r\n  config = uiConfig;\r\n\r\n  addNodeX: number | null = null;\r\n  addNodeY: number | null = null;\r\n  addEdgeStart: string | null = null;\r\n  addEdgeEnd: string | null = null;\r\n\r\n  constructor() {\r\n    this.selectors = {\r\n      addNodeBtn: '#add-node-btn',\r\n      addNodeModal: '#add-node-modal',\r\n      addNodeLabel: '#add-node-label',\r\n      addNodeSubmitBtn: '#add-node-submit-btn',\r\n      addEdgeBtn: '#add-edge-btn',\r\n      addEdgeModal: '#add-edge-modal',\r\n      addEdgeWeightInput: '#add-edge-weight',\r\n      addEdgeSubmitBtn: '#add-edge-submit-btn',\r\n      deleteBtn: '#delete-btn',\r\n\r\n      runBtn: '#run-btn',\r\n      runStartBtn: '#run-start-btn',\r\n      runAlgoModal: '#run-algo-modal',\r\n      runAlgoGuess: '#run-algo-guess',\r\n      predictTipsModal: '#predict-tips-modal',\r\n      dontShowTipsAgain: '#dont-show-tips-again',\r\n      prevBtn: '#prev-btn',\r\n      nextBtn: '#next-btn',\r\n      skipBtn: '#skip-btn',\r\n      stopBtn: '#stop-btn',\r\n      autorunSlider: '#autorun-slider',\r\n\r\n      refreshBtn: '#refresh-btn',\r\n      loadExBtn: '#load-ex-btn',\r\n      infoBtn: '#info-btn',\r\n      infoModal: '#info-modal',\r\n\r\n      textDescription: '#text-description',\r\n      graphTable: '#graph-table'\r\n    };\r\n\r\n    this.config = uiConfig;\r\n    this.canvas = document.querySelector('#canvas') !;\r\n    this.nodeGrid = new NodeGrid();\r\n    this.canvasGraph = new CanvasGraph(this.canvas, this.nodeGrid);\r\n    this.table = new Table(this.selectors.graphTable);\r\n    this.graph = new Graph();\r\n    this.textDescription = new TextDescription(this.selectors.textDescription);\r\n    this.btnHandler = new ButtonHandler(this.selectors.runBtn);\r\n  }\r\n\r\n  init = (): void => {\r\n    // Initialise MaterialCSS instances\r\n    M.Tooltip.init(document.querySelectorAll('.tooltipped'), {\r\n      inDuration: 250,\r\n      outDuration: 150,\r\n      transitionMovement: 3\r\n    });\r\n\r\n    initModal(this.selectors.addNodeModal);\r\n    initModal(this.selectors.addEdgeModal, { onCloseEnd: this.deselectEdge });\r\n    initModal(this.selectors.runAlgoModal);\r\n    initModal(this.selectors.predictTipsModal);\r\n    initModal(this.selectors.infoModal);\r\n\r\n    this.createGrid();\r\n    this.toggleGrid(false);\r\n    console.log('UI initialised.');\r\n  }\r\n\r\n  drawGraph = (nodes: GraphNode[], edges: GraphEdge[], graphClickHandler: { (e: Event): void }): void => {\r\n    this.canvasGraph.drawGraph(nodes, edges, graphClickHandler);\r\n  }\r\n\r\n  createGrid = (): void => {\r\n    this.nodeGrid.createGrid(this.canvas, this.gridClickHandler);\r\n  }\r\n\r\n  toggleGrid = (show: boolean): void => {\r\n    this.nodeGrid.toggleGrid(show);\r\n  }\r\n\r\n  setTextDescription = (html=''): void => {\r\n    this.textDescription.setTextDescription(html);\r\n  }\r\n\r\n  drawTable = (nodes: GraphNode[]): void => {\r\n    this.table.drawTable(nodes);\r\n  }\r\n\r\n  updateTable = (nodes: GraphNode[], step: AlgoStep, algoStart: GraphNode): void => {\r\n    this.table.updateTable(nodes, step, algoStart);\r\n  }\r\n\r\n  updateGraph = (graph: GraphStructure, step: AlgoStep): void => {\r\n    this.graph.updateGraph(graph, step);\r\n  }\r\n\r\n  updateGraphLast = (result: GraphNode[]): void => {\r\n    this.graph.updateGraphLast(result);\r\n  }\r\n\r\n  darkenButton = (button: Element | string): void => {\r\n    this.btnHandler.darkenButton(button);\r\n  }\r\n\r\n  resetButton = (button: Element | string): void => {\r\n    this.btnHandler.resetButton(button);\r\n  }\r\n\r\n  toggleButton = (btnElement: HTMLElement, enable: boolean): void => {\r\n    this.btnHandler.toggleButton(btnElement, enable);\r\n  }\r\n\r\n  toggleRunBtn = (mode: ('play' | 'pause')): void => {\r\n    this.btnHandler.toggleRunBtn(mode);\r\n  }\r\n\r\n  toggleButtonSet1 = (enable: boolean): void => {\r\n    // Non-algo running functions\r\n    this.btnHandler.toggleButtons([\r\n      document.querySelector(this.selectors.addNodeBtn) !,\r\n      document.querySelector(this.selectors.addEdgeBtn) !,\r\n      document.querySelector(this.selectors.deleteBtn) !,\r\n      document.querySelector(this.selectors.refreshBtn) !,\r\n      document.querySelector(this.selectors.loadExBtn) !,\r\n      document.querySelector(this.selectors.infoBtn) !\r\n    ], enable);\r\n  }\r\n\r\n  toggleButtonSet2 = (enable: boolean): void => {\r\n    // Algo running buttons except play button\r\n    this.btnHandler.toggleButtons([\r\n      document.querySelector(this.selectors.prevBtn) !,\r\n      document.querySelector(this.selectors.nextBtn) !,\r\n      document.querySelector(this.selectors.skipBtn) !,\r\n      document.querySelector(this.selectors.stopBtn) !\r\n    ], enable);\r\n  }\r\n\r\n  toggleButtonSet3 = (enable: boolean): void => {\r\n    // Play button and skip button, disabled for the \"last step\"\r\n    this.btnHandler.toggleButtons([\r\n      document.querySelector(this.selectors.runBtn) !,\r\n      document.querySelector(this.selectors.skipBtn) !,\r\n    ], enable);\r\n  }\r\n\r\n  lightenDrawButtons = (): void => {\r\n    (document.querySelector(this.selectors.addNodeBtn) !).classList.remove('darken-3');\r\n    (document.querySelector(this.selectors.addEdgeBtn) !).classList.remove('darken-3');\r\n    (document.querySelector(this.selectors.deleteBtn) !).classList.remove('darken-3');\r\n  }\r\n\r\n  toast = (options={}): void => {\r\n    M.toast(options);\r\n  }\r\n\r\n  resetAll = (appState: string): void => {\r\n    this.resetCanvas(appState);\r\n    this.lightenDrawButtons();\r\n    this.resetValues();\r\n\r\n    this.createGrid();\r\n    if (appState !== APP_STATES.NODE_EDIT) {\r\n      this.toggleGrid(false);\r\n    }\r\n  }\r\n\r\n  resetCanvas = (appState: string): void => {\r\n    if (!this.canvas) return;\r\n    this.canvas.innerHTML = '';\r\n    this.createGrid();\r\n    if (appState !== APP_STATES.NODE_EDIT) {\r\n      this.toggleGrid(false);\r\n    }\r\n  }\r\n\r\n  resetValues = (): void => {\r\n    this.addEdgeStart = null;\r\n    this.addEdgeEnd = null;\r\n    this.addNodeX = null;\r\n    this.addNodeY = null;\r\n  }\r\n\r\n  deselectEdge = (): void => {\r\n    const startNode = document.querySelector(`[data-node-id='${this.addEdgeStart}']`) !;\r\n    const endNode = document.querySelector(`[data-node-id='${this.addEdgeEnd}']`) !;\r\n    startNode.classList.remove('focus');\r\n    endNode.classList.remove('focus');\r\n    this.resetValues();\r\n  }\r\n\r\n  // Handle add-node state. This function is called only from the add-node grid.\r\n  gridClickHandler = (e: Event): void => {\r\n    const clickTarget = e.target as HTMLElement;\r\n    if (clickTarget.classList.contains('grid-circle')) {\r\n      this.addNodeX = parseInt(clickTarget.dataset.gridX !);\r\n      this.addNodeY = parseInt(clickTarget.dataset.gridY !);\r\n\r\n      openModal(this.selectors.addNodeModal);\r\n      (document.querySelector(this.selectors.addNodeLabel) as HTMLElement).focus();\r\n      // Remaining code occurs at addNodeSubmitHandler()\r\n    }\r\n  };\r\n}\r\n","import { GraphStructure, GraphNode } from './GraphStructure';\r\nimport { APP_STATES } from './AppStates';\r\nimport { EXAMPLE_GRAPHS } from './GraphExamples';\r\n\r\nimport { WeightedGraph } from '../model/WeightedGraph';\r\nimport { Dijkstra } from '../model/Dijkstra';\r\nimport { UICtrl } from '../view/UiCtrl';\r\n\r\nimport { preventNonNumberKeydown, getLabelOfNodeFromId, checkIfNodeExists, checkIfEdgeExists } from './utils';\r\nimport { openModal, closeModal } from '../view/ModalFuncs';\r\n\r\nclass Controller {\r\n  currentGraph: GraphStructure = { nodes: [], edges: [] };\r\n  currentState: string = APP_STATES.NONE;\r\n  exampleGraphIdx: number = 0;\r\n\r\n  weightedGraph: WeightedGraph = new WeightedGraph();\r\n  algoStart: GraphNode | null = null;\r\n  algoEnd: GraphNode | null = null;\r\n\r\n  dijkstras?: Dijkstra;\r\n  processedResult: GraphNode[] = [];\r\n  stepCounter: number = 0;\r\n  stepMax: number = 0;\r\n\r\n  predictionMode: boolean = false;\r\n  predictionInput: GraphNode[] = [];\r\n  predictionCost: number = 0;\r\n  currentPredSelection?: GraphNode;\r\n  predSelectionNeighbours: GraphNode[] = [];\r\n\r\n  autorunInstance?: number;\r\n  autorunInterval: number = 500;\r\n\r\n  showTips: boolean = true;\r\n\r\n  ui: UICtrl = new UICtrl();\r\n  initText: string = `\r\n    <h5>Visualising Dijkstra's Algorithm</h5>\r\n    <p>This is a tool for learners to understand Dijkstra's shortest path algorithm.</p><br />\r\n    <p><span class=\"strong\">Make your own graph</span> by adding nodes and edges with the buttons on the top left.</p>\r\n    <p><span class=\"strong\">Run the algorithm</span> to find the shortest path between two nodes.</p><br />\r\n    <p>You can also try loading some pre-made graphs with the 'Load Example' button.</p>\r\n  `;\r\n\r\n  constructor() {\r\n    document.addEventListener('DOMContentLoaded', () => {\r\n      this.ui.init();\r\n      this.init();\r\n    });\r\n\r\n    this.loadEventListeners();\r\n\r\n    console.log('App initialised.');\r\n  }\r\n\r\n  loadEventListeners = (): void => {\r\n    document.querySelector(this.ui.selectors.addNodeBtn) !.addEventListener('click', this.addNodeHandler);\r\n    document.querySelector(this.ui.selectors.addNodeSubmitBtn) !.addEventListener('click', this.addNodeSubmitHandler);\r\n    document.querySelector(this.ui.selectors.addEdgeBtn) !.addEventListener('click', this.addEdgeHandler);\r\n    document.querySelector(this.ui.selectors.addEdgeSubmitBtn) !.addEventListener('click', this.addEdgeSubmitHandler);\r\n    document.querySelector(this.ui.selectors.deleteBtn) !.addEventListener('click', this.deleteButtonHandler);\r\n\r\n    document.querySelector(this.ui.selectors.runBtn) !.addEventListener('click', this.runBtnHandler);\r\n    document.querySelector(this.ui.selectors.runStartBtn) !.addEventListener('click', this.initAlgorithm);\r\n    document.querySelector(this.ui.selectors.prevBtn) !.addEventListener('click', this.previousBtnHandler);\r\n    document.querySelector(this.ui.selectors.nextBtn) !.addEventListener('click', this.nextBtnHandler);\r\n    document.querySelector(this.ui.selectors.skipBtn) !.addEventListener('click', this.skipAlgorithm);\r\n    document.querySelector(this.ui.selectors.stopBtn) !.addEventListener('click', this.stopRunning);\r\n\r\n    document.querySelector(this.ui.selectors.refreshBtn) !.addEventListener('click', this.refresh);\r\n    document.querySelector(this.ui.selectors.loadExBtn) !.addEventListener('click', this.loadExampleGraph);\r\n\r\n    document.querySelector(this.ui.selectors.autorunSlider) !.addEventListener('input', (e: Event) =>\r\n      this.resetAutorun((e.target as HTMLInputElement).value)\r\n    );\r\n    document.querySelector(this.ui.selectors.dontShowTipsAgain) !.addEventListener('change', (e: Event) =>\r\n      this.showTips = !(e.target as HTMLInputElement).checked\r\n    );\r\n\r\n    // Press 'enter' to submit within modals\r\n    document.querySelector(this.ui.selectors.addNodeModal) !.addEventListener(\r\n      'keydown', (e: KeyboardEventInit) => { if (e.key === 'Enter') this.addNodeSubmitHandler(); }\r\n    );\r\n    document.querySelector(this.ui.selectors.addEdgeModal) !.addEventListener(\r\n      'keydown', (e: KeyboardEventInit) => { if (e.key === 'Enter') this.addEdgeSubmitHandler(); }\r\n    );\r\n    document.querySelector(this.ui.selectors.runAlgoModal) !.addEventListener(\r\n      'keydown', (e: KeyboardEventInit) => { if (e.key === 'Enter') this.initAlgorithm(); }\r\n    );\r\n\r\n    // Prevent entering non-numbers into number field\r\n    (<HTMLInputElement>document.querySelector(this.ui.selectors.addEdgeWeightInput)).addEventListener('keydown', preventNonNumberKeydown);\r\n\r\n    window.addEventListener('keydown', this.globalKeyDown);\r\n  }\r\n\r\n  init = (): void => {\r\n    this.currentState = APP_STATES.NONE;\r\n    this.currentGraph = { nodes: [], edges: [] };\r\n    this.weightedGraph.resetGraph();\r\n    this.enableEdgeBtnLogic();\r\n    this.enableDeleteBtnLogic();\r\n    this.enableRunBtnLogic();\r\n    this.ui.resetAll(this.currentState);\r\n    this.ui.toggleButtonSet2(false);\r\n    this.ui.drawTable([]);\r\n    this.ui.setTextDescription(this.initText);\r\n    this.resetAutorun((document.querySelector(this.ui.selectors.autorunSlider) as HTMLInputElement).value);\r\n    this.showTips = !(document.querySelector(this.ui.selectors.dontShowTipsAgain) as HTMLInputElement).checked;\r\n  }\r\n\r\n  refresh = (): void => {\r\n    // init() but with an extra toast message\r\n    this.ui.toast({ html: `Graph cleared`, displayLength: 1000 });\r\n    this.init();\r\n  }\r\n\r\n  loadExampleGraph = (): void => {\r\n    this.currentState = APP_STATES.NONE;\r\n\r\n    // Copy example graph:\r\n    let randomGraphIdx = this.exampleGraphIdx;\r\n    while (randomGraphIdx === this.exampleGraphIdx) {\r\n      randomGraphIdx = Math.floor(Math.random() * EXAMPLE_GRAPHS.length);\r\n    }\r\n    this.exampleGraphIdx = randomGraphIdx;\r\n    this.currentGraph = JSON.parse(JSON.stringify(EXAMPLE_GRAPHS[randomGraphIdx]));  // Deep copy\r\n\r\n    const { nodes, edges } = this.currentGraph;\r\n\r\n    // Reset then add to the Weighted Graph data structure:\r\n    this.weightedGraph.resetGraph();\r\n    for (let i = 0; i < nodes.length; i++) {\r\n      const node = nodes[i].id;\r\n      this.weightedGraph.addNode(node);\r\n    }\r\n    for (let i = 0; i < edges.length; i++) {\r\n      const {start, end, weight} = edges[i];\r\n      this.weightedGraph.addEdge(start, end, weight);\r\n    }\r\n\r\n    // Reset UI, then draw to UI:\r\n    this.ui.resetAll(this.currentState);\r\n    this.enableDeleteBtnLogic();\r\n    this.enableEdgeBtnLogic();\r\n    this.enableRunBtnLogic();\r\n\r\n    this.ui.resetCanvas(this.currentState);\r\n    this.ui.drawGraph(nodes, edges, this.graphClickHandler);\r\n\r\n    this.ui.setTextDescription(this.initText);\r\n    this.ui.drawTable(nodes);\r\n    this.ui.toast({ html: `Graph loaded`, displayLength: 1000 });\r\n  }\r\n\r\n  // -------------------\r\n  // Add node funcs\r\n  // -------------------\r\n  addNodeHandler = (): void => {\r\n    this.ui.lightenDrawButtons();\r\n    if (this.currentState !== APP_STATES.NODE_EDIT) {\r\n      this.currentState = APP_STATES.NODE_EDIT;\r\n      this.ui.toggleGrid(true);\r\n      this.ui.darkenButton(this.ui.selectors.addNodeBtn);\r\n      this.ui.toast({ html: `Add node mode`, displayLength: 1000 });\r\n    } else {\r\n      this.currentState = APP_STATES.NONE;\r\n      this.ui.toggleGrid(false);\r\n    }\r\n  }\r\n\r\n  addNodeSubmitHandler = (): void => {\r\n    const labelInput = document.querySelector(this.ui.selectors.addNodeLabel) as HTMLInputElement;\r\n    const label = labelInput.value.trim();\r\n    if (label === '') return;\r\n    if (checkIfNodeExists(this.currentGraph.nodes, label)) return;\r\n\r\n    labelInput.value = '';\r\n    M.updateTextFields();\r\n\r\n    closeModal(this.ui.selectors.addNodeModal);\r\n    this.addNode(this.ui.addNodeX !, this.ui.addNodeY !, label);\r\n    this.ui.addNodeX = null;\r\n    this.ui.addNodeY = null;\r\n  }\r\n\r\n  addNode = (x: number, y: number, label: string): void => {\r\n    // Get the highest of the ids in the currentGraph, then add 1 (very hacky)\r\n    const id = String(Math.max(...this.currentGraph.nodes.map(node => parseInt(node.id)), -1) + 1);\r\n\r\n    const newNode = {id, label, x, y};\r\n\r\n    // Add to currentGraph\r\n    this.currentGraph.nodes.push(newNode);\r\n\r\n    // Add to data structure\r\n    this.weightedGraph.addNode(id);\r\n\r\n    // Redraw UI\r\n    this.ui.resetCanvas(this.currentState);\r\n    this.ui.drawGraph(this.currentGraph.nodes, this.currentGraph.edges, this.graphClickHandler);\r\n    this.ui.drawTable(this.currentGraph.nodes);\r\n\r\n    this.enableDeleteBtnLogic();\r\n    this.enableEdgeBtnLogic();\r\n    this.enableRunBtnLogic();\r\n  }\r\n\r\n  // -------------------\r\n  // Add edge funcs\r\n  // -------------------\r\n  addEdgeHandler = (): void => {\r\n    this.ui.lightenDrawButtons();\r\n    this.ui.toggleGrid(false);\r\n    this.ui.resetValues();\r\n    if (this.currentState !== APP_STATES.EDGE_EDIT) {\r\n      this.currentState = APP_STATES.EDGE_EDIT;\r\n      this.ui.darkenButton(this.ui.selectors.addEdgeBtn);\r\n      this.ui.toast({ html: `Add edge mode`, displayLength: 1000 });\r\n    } else {\r\n      this.currentState = APP_STATES.NONE;\r\n    }\r\n  }\r\n\r\n  addEdgeSubmitHandler = (): void => {\r\n    const weightInput = document.getElementById('add-edge-weight') as HTMLInputElement;\r\n    const weight = parseInt(weightInput.value);\r\n    if (!weight || weight <= 0) {\r\n      return;\r\n    }\r\n    weightInput.value = '1';\r\n    M.updateTextFields();\r\n\r\n    closeModal(this.ui.selectors.addEdgeModal);\r\n\r\n    this.addEdge(this.ui.addEdgeStart !, this.ui.addEdgeEnd !, weight);\r\n  }\r\n\r\n  addEdge = (start: string, end: string, weight: number): void => {\r\n    // Add to currentGraph\r\n    const newEdge = {start, end, weight};\r\n    this.currentGraph.edges.push(newEdge);\r\n\r\n    // Add to data structure\r\n    this.weightedGraph.addEdge(start, end, weight);\r\n\r\n    // Draw on UI\r\n    this.ui.resetCanvas(this.currentState);\r\n    this.ui.drawGraph(this.currentGraph.nodes, this.currentGraph.edges, this.graphClickHandler);\r\n    this.ui.drawTable(this.currentGraph.nodes);\r\n  }\r\n\r\n  // -------------------\r\n  // Delete object funcs\r\n  // -------------------\r\n  deleteButtonHandler = (): void => {\r\n    this.ui.lightenDrawButtons();\r\n    this.ui.toggleGrid(false);\r\n    this.ui.resetValues();\r\n\r\n    if (this.currentState !== APP_STATES.DELETE_OBJ) {\r\n      this.currentState = APP_STATES.DELETE_OBJ;\r\n      this.ui.darkenButton(this.ui.selectors.deleteBtn);\r\n      this.ui.toast({ html: `Delete mode`, displayLength: 1000 });\r\n    } else {\r\n      this.currentState = APP_STATES.NONE;\r\n      this.ui.toggleGrid(false);\r\n    }\r\n  }\r\n\r\n  deleteNode = (id: string): void => {\r\n    // Deleting a Node also removes all the edges attached to it.\r\n    this.currentGraph.edges = this.currentGraph.edges.filter((edge) =>\r\n      edge.start !== id && edge.end !== id\r\n    );\r\n    this.currentGraph.nodes = this.currentGraph.nodes.filter((node) =>\r\n      node.id !== id\r\n    );\r\n\r\n    // Remove from data structure\r\n    this.weightedGraph.removeNode(id);\r\n\r\n    // Redraw UI\r\n    this.ui.resetCanvas(this.currentState);\r\n    this.ui.drawGraph(this.currentGraph.nodes, this.currentGraph.edges, this.graphClickHandler);\r\n    this.ui.drawTable(this.currentGraph.nodes);\r\n\r\n    this.enableEdgeBtnLogic();\r\n    this.enableDeleteBtnLogic();\r\n    this.enableRunBtnLogic();\r\n  }\r\n\r\n  deleteEdge = (start: string, end: string): void => {\r\n    // Remove from app state\r\n    this.currentGraph.edges = this.currentGraph.edges.filter((edge) =>\r\n      !(edge.start === start && edge.end === end) &&\r\n      !(edge.end === start && edge.start === end)\r\n    );\r\n\r\n    // Remove from data structure\r\n    this.weightedGraph.removeEdge(start, end);\r\n\r\n    // Redraw UI\r\n    this.ui.resetCanvas(this.currentState);\r\n    this.ui.drawGraph(this.currentGraph.nodes, this.currentGraph.edges, this.graphClickHandler);\r\n    this.ui.drawTable(this.currentGraph.nodes);\r\n  }\r\n\r\n  runBtnHandler = (): void => {\r\n    if (this.algoIsRunning() && this.stepCounter === this.stepMax) {\r\n      return;\r\n    }\r\n    if (this.currentState === APP_STATES.RUNNING) {\r\n      this.stopAutorun();\r\n      return;\r\n    }\r\n    if (this.currentState === APP_STATES.PAUSED) {\r\n      this.startAutorun();\r\n      return;\r\n    }\r\n    if (this.currentState === APP_STATES.PREDICTING) {\r\n      this.calculatePredictionCost();\r\n      this.processAlgorithm();\r\n      return;\r\n    }\r\n\r\n    // Open run-algo-modal.\r\n    // Select start and end nodes for the algorithm.\r\n    this.ui.lightenDrawButtons();\r\n    this.ui.toggleGrid(false);\r\n    this.ui.resetValues();\r\n    this.populateSelects();\r\n    openModal(this.ui.selectors.runAlgoModal);\r\n  }\r\n\r\n  previousBtnHandler = (): void => {\r\n    this.stopAutorun();\r\n    this.previousStep()\r\n  }\r\n\r\n  nextBtnHandler = (): void => {\r\n    this.stopAutorun();\r\n    this.nextStep()\r\n  }\r\n\r\n  populateSelects = (): void => {\r\n    const selects = document.querySelectorAll('select');\r\n\r\n    selects.forEach(select => {\r\n      while (select.options.length > 1) {\r\n        select.options.remove(1);\r\n      }\r\n\r\n      for (let i = 0; i < this.currentGraph.nodes.length; i++) {\r\n        const option = document.createElement(\"option\");\r\n        // option.value = this.currentGraph.nodes[i].id;s\r\n        option.text = this.currentGraph.nodes[i].label;\r\n        select.options.add(option);\r\n      }\r\n    });\r\n\r\n    M.FormSelect.init(selects, { classes: 'mb-3' });\r\n    document.querySelector(this.ui.selectors.runAlgoModal + ' .helper-text') !.classList.add('hidden');\r\n  }\r\n\r\n  initAlgorithm = (): void => {\r\n    // Get start and end values from selects\r\n    const startInstance = M.FormSelect.getInstance(document.getElementById('algo-start') !);\r\n    const endInstance = M.FormSelect.getInstance(document.getElementById('algo-end') !);\r\n    const startLabel = startInstance.input.value;\r\n    const endLabel = endInstance.input.value;\r\n\r\n    if (startLabel === endLabel) {\r\n      // Show error message\r\n      document.querySelector(this.ui.selectors.runAlgoModal + ' .helper-text') !.classList.remove('hidden');\r\n      return;\r\n    }\r\n\r\n    // Set global state to the start and end nodes' IDs\r\n    this.algoStart = this.currentGraph.nodes.filter(node => node.label === startLabel)[0];\r\n    this.algoEnd = this.currentGraph.nodes.filter(node => node.label === endLabel)[0];\r\n    if (!this.algoStart) return;\r\n    if (!this.algoEnd) return;\r\n    // console.log(`run: start=${this.algoStart.id}, end=${this.algoEnd.id}`);\r\n\r\n    closeModal(this.ui.selectors.runAlgoModal);\r\n\r\n    this.predictionMode = (document.querySelector(this.ui.selectors.runAlgoGuess) as HTMLInputElement).checked;\r\n    if (this.predictionMode) {\r\n      this.currentState = APP_STATES.PREDICTING;\r\n      if (this.showTips) {\r\n        openModal(this.ui.selectors.predictTipsModal);\r\n      }\r\n      this.getUserPrediction();\r\n    } else {\r\n      this.processAlgorithm();\r\n    }\r\n  }\r\n\r\n  getUserPrediction = (): void => {\r\n    // User will start running the algorithm by pressing run-btn again.\r\n    this.ui.toggleButtonSet1(false);\r\n    this.ui.graph.removeHighlightfromAllEdges();\r\n    this.ui.graph.removeHighlightfromAllNodes();\r\n    this.predictionInput = [];\r\n    this.predictionInput.push(this.algoStart !);\r\n    this.updatePrediction();\r\n  }\r\n\r\n  updatePrediction = (): void => {\r\n    // Update predictionCost\r\n    this.calculatePredictionCost();\r\n\r\n    this.ui.graph.removeHighlightfromAllNodes();\r\n\r\n    this.currentPredSelection = this.predictionInput[this.predictionInput.length - 1];\r\n    document.querySelector(`[data-node-id='${this.currentPredSelection.id}']`) !.classList.add('current-node');\r\n    document.querySelector(`[data-node-id='${this.algoEnd !.id}']`) !.classList.add('special-node');\r\n\r\n    // Get the neighbours of the currently selected node:\r\n    this.predSelectionNeighbours = [];\r\n    const neighbourIds = Object.keys(this.weightedGraph.adjacencyList[this.currentPredSelection.id]);\r\n    neighbourIds.forEach(id => {\r\n      const node = this.currentGraph.nodes.filter(node => id === node.id)[0];\r\n      this.predSelectionNeighbours.push(node);\r\n    });\r\n\r\n    // Apply colour to the neighbours\r\n    this.predSelectionNeighbours.forEach((node) => {\r\n      document.querySelector(`[data-node-id='${node.id}']`) !.classList.add('neighbour-node');\r\n    });\r\n\r\n    this.setPredictionText();\r\n  }\r\n\r\n  calculatePredictionCost = (): void => {\r\n    this.predictionCost = 0;\r\n    for (let i = 1; i < this.predictionInput.length; i++) {\r\n      const prevId = this.predictionInput[i-1].id;\r\n      const nextId = this.predictionInput[i].id;\r\n      this.predictionCost += this.weightedGraph.adjacencyList[prevId][nextId];\r\n    }\r\n  }\r\n\r\n  setPredictionText = (): void => {\r\n    let predStr = '';\r\n\r\n    this.predictionInput.forEach(node => {\r\n      predStr += `<p>(#${node.id}) ${node.label}</p>`;\r\n    });\r\n\r\n    this.ui.setTextDescription(`\r\n      <h5>From ${this.algoStart !.label} to ${this.algoEnd !.label}</h5>\r\n      <p class=\"strong\">Predict the shortest path:</p>\r\n      <p>Compare your human intuition to the algorithm's result!</p><br />\r\n      <p>Click on a <span class=\"strong neighbour-node\">neighbouring node</span> to add to your predicted path.</p>\r\n      <p>Click on the <span class=\"strong current-node\">source node</span> to remove it from your predicted path.</p>\r\n      <p>Click on the <span class=\"strong\">run button</span> again to run the algorithm.</p><br />\r\n      <p class=\"strong\">Selected path (cost = ${this.predictionCost}):</p>\r\n    ` + predStr\r\n    );\r\n  }\r\n\r\n  processAlgorithm = (): void => {\r\n    this.currentState = APP_STATES.RUNNING;\r\n    this.ui.toggleRunBtn('pause');\r\n    this.ui.toggleButtonSet1(false);\r\n    this.ui.toggleButtonSet2(true);\r\n\r\n    // Disable other buttons\r\n    this.ui.resetCanvas(this.currentState);\r\n    this.ui.drawGraph(this.currentGraph.nodes, this.currentGraph.edges, this.graphClickHandler);\r\n    this.ui.setTextDescription();\r\n    this.ui.drawTable(this.currentGraph.nodes);\r\n\r\n    this.dijkstras = new Dijkstra(\r\n      this.weightedGraph.adjacencyList,\r\n      this.algoStart !.id,\r\n      this.algoEnd !.id\r\n    );\r\n\r\n    this.processedResult = this.dijkstras.run().map((item) => {\r\n      return this.currentGraph.nodes.filter(node => node.id === item)[0];\r\n    });\r\n\r\n    this.stepCounter = 0;\r\n    this.stepMax = this.dijkstras.algoSteps.length - 1;\r\n    this.updateStep();\r\n    this.startAutorun();\r\n  }\r\n\r\n  algoStateToTextDesc = (): string => {\r\n    // Output different HTML strings based on which state.flag is specified\r\n    const { costFromStartTo, current, state } = this.dijkstras !.algoSteps[this.stepCounter];\r\n    const currentLabel = current ? getLabelOfNodeFromId(this.currentGraph.nodes, current) : null;\r\n    let outStr = '';\r\n\r\n    switch (state.flag) {\r\n      case 0:\r\n        return `\r\n          <p>Initialised lists.</p>\r\n          <p>Costs for all nodes initialised as Infinity.</p>\r\n        `;\r\n      case 1:\r\n        return `\r\n          <p>\r\n            Evaluating the next node with lowest \"priority\" value:\r\n            <span class=\"current-node\">${currentLabel} (#${current})</span>\r\n          </p>\r\n        `;\r\n      case 6:\r\n        return `\r\n          <p>\r\n            Current node:\r\n            <span class=\"current-node\">${currentLabel}</span>\r\n            = destination node, so we've found a solution!\r\n          </p>\r\n        `;\r\n      case 7:\r\n        outStr = `\r\n          <p>From the destination node, we go back to the starting node through the closest neighbours, and add them to a list.</p>\r\n          <br />\r\n          <p>\r\n            Current node:\r\n            <span class=\"current-node\">${currentLabel}</span>\r\n            (#${current})\r\n          </p>\r\n          <br />\r\n          <p>Shortest path result:</p>\r\n        `;\r\n        state.result!.forEach((nodeId) => {\r\n          const nodeLabel = getLabelOfNodeFromId(this.currentGraph.nodes, nodeId)\r\n          if (nodeId === current) {\r\n            outStr += `<p>(#${nodeId}) <span class=\"current-node\">${nodeLabel}</span></p>`;\r\n          } else {\r\n            outStr += `<p>(#${nodeId}) ${nodeLabel}</p>`;\r\n          }\r\n        });\r\n        return outStr;\r\n      case 8:\r\n        outStr = `\r\n          <p>Reverse the list, and we have the solution!</p>\r\n          <br />\r\n          <p class=\"strong\">Shortest path result (cost = ${state.bestCost}):</p>\r\n        `;\r\n        this.processedResult.forEach((node, i) => {\r\n          let classname = '';\r\n          if (i === 0) {\r\n            classname = 'current-node';\r\n          } else if (i === this.processedResult.length - 1) {\r\n            classname = 'special-node';\r\n          } else {\r\n            classname = 'neighbour-node'\r\n          }\r\n          outStr += `<p>(#${node.id}) <span class=\"${classname}\">${node.label}</span></p>`;\r\n        });\r\n        if (this.predictionMode) {\r\n          outStr += `\r\n            <br/>\r\n            <p class=\"strong\">Your predicted path (cost = ${this.predictionCost}):</p>\r\n          `;\r\n          this.predictionInput.forEach(node => {\r\n            outStr += `<p>(#${node.id}) ${node.label}</p>`;\r\n          });\r\n        }\r\n        return outStr;\r\n      case 9:\r\n        // No result case\r\n        return `\r\n          <p>\r\n            The algorithm has searched through all the neighbours connected by edges, but couldn't find any edges that connect to the destination.\r\n          </p>\r\n          <br />\r\n          <p>\r\n            We couldn't find a shortest path because there is no path. Too bad...\r\n          </p>\r\n          `;\r\n      default: break;\r\n    }\r\n\r\n    const neighbourLabel = state.neighbour ? getLabelOfNodeFromId(this.currentGraph.nodes, state.neighbour): null;\r\n    const isNeighbourSameAsStart = current === this.algoStart!.id;\r\n    const costFromStartToNeighbourNode =\r\n      costFromStartTo[state.neighbour !] === null ?\r\n      Infinity :\r\n      costFromStartTo[state.neighbour !];\r\n\r\n    outStr = `\r\n      <p>Current node:\r\n        <span class=\"current-node\">${currentLabel} (#${current})</span>\r\n      </p>\r\n      <br />\r\n      <p>Loop through the neighbouring nodes of the current node and evaluate their cost.</p>\r\n      <br />\r\n      <p>1. Neighbour node:\r\n        <span class=\"neighbour-node\">${neighbourLabel} (#${state.neighbour})</span>\r\n      </p>\r\n      <p>2. Cost from start (${this.algoStart!.label}) to \r\n        ${isNeighbourSameAsStart ? '' :\r\n          `<span class=\"current-node\">${currentLabel}</span> to`\r\n        }\r\n        <span class=\"neighbour-node\">${neighbourLabel}</span>\r\n        = ${state.costToNeighbour}\r\n      </p>\r\n      ${isNeighbourSameAsStart ? '' :\r\n        `<p>\r\n          3. Cost from start (${this.algoStart!.label}) to\r\n          <span class=\"neighbour-node\">${neighbourLabel}</span>\r\n          = ${costFromStartToNeighbourNode}\r\n          ${state.flag === 4 ? '<span class=\"neighbour-node\">(updated)</span>' : ''}\r\n        </p>`\r\n      }\r\n      <br />\r\n    `;\r\n\r\n    switch (state.flag) {\r\n      case 2: break;\r\n      case 3:\r\n        outStr += `\r\n          <p>\r\n            Since ${state.costToNeighbour} < ${costFromStartToNeighbourNode}, we should update the information for\r\n            <span class=\"neighbour-node\">${neighbourLabel}</span>.\r\n          </p>\r\n          `;\r\n        break;\r\n      case 4:\r\n        outStr += `\r\n          <p>\r\n            Updated information for\r\n            <span class=\"neighbour-node\">${neighbourLabel}</span> in the table.\r\n          </p>`;\r\n        break;\r\n      case 5:\r\n        outStr += `\r\n          <p>\r\n            Since ${state.costToNeighbour} is not < ${costFromStartToNeighbourNode}, we don't update the lists.\r\n          </p>\r\n        `;\r\n        break;\r\n      default: return 'Error with state.flag';\r\n    }\r\n\r\n    return outStr;\r\n  }\r\n\r\n  updateStep = (): void => {\r\n    this.ui.setTextDescription(\r\n      `<h5>From ${this.algoStart!.label} to ${this.algoEnd!.label}</h5>` +\r\n      this.algoStateToTextDesc()\r\n    );\r\n\r\n    this.ui.updateTable(\r\n      this.currentGraph.nodes,\r\n      this.dijkstras !.algoSteps[this.stepCounter],\r\n      this.algoStart!\r\n    );\r\n\r\n    if (this.stepCounter === this.stepMax) {\r\n      // Special action for final step\r\n      this.ui.updateGraphLast(this.processedResult);\r\n      this.ui.toggleButtonSet3(false);\r\n      this.stopAutorun();\r\n    } else {\r\n      this.ui.updateGraph(this.currentGraph, this.dijkstras !.algoSteps[this.stepCounter]);\r\n      this.ui.toggleButtonSet3(true);\r\n    }\r\n  }\r\n\r\n  previousStep = (): void => {\r\n    if (!(this.algoIsRunning())) { return; }\r\n    if (this.stepCounter <= 0) { return; }\r\n\r\n    this.stepCounter--;\r\n    this.updateStep();\r\n  }\r\n\r\n  nextStep = (): void => {\r\n    if (!(this.algoIsRunning())) { return; }\r\n    if (this.stepCounter >= this.stepMax) { return; }\r\n\r\n    this.stepCounter++;\r\n    this.updateStep();\r\n  }\r\n\r\n  skipAlgorithm = (): void => {\r\n    if (!(this.algoIsRunning())) { return; }\r\n\r\n    this.stopAutorun();\r\n    this.stepCounter = this.stepMax;\r\n    this.updateStep();\r\n  }\r\n\r\n  stopRunning = (): void => {\r\n    if (!(this.algoIsRunning())) { return; }\r\n\r\n    this.stopAutorun();\r\n    this.currentState = APP_STATES.NONE;\r\n    this.ui.toggleButtonSet3(true);\r\n    this.ui.toggleButtonSet1(true);\r\n    this.ui.toggleButtonSet2(false);\r\n    this.algoStart = null;\r\n    this.algoEnd = null;\r\n  }\r\n\r\n  startAutorun = (): void => {\r\n    this.currentState = APP_STATES.RUNNING;\r\n    this.autorunInstance = setInterval(this.nextStep, this.autorunInterval);\r\n    this.ui.toggleRunBtn('pause');\r\n  }\r\n\r\n  stopAutorun = (): void => {\r\n    clearInterval(this.autorunInstance);\r\n    this.currentState = APP_STATES.PAUSED;\r\n    this.ui.toggleRunBtn('play');\r\n  }\r\n\r\n  resetAutorun = (value: string): void => {\r\n    switch (value) {\r\n      case '0': this.autorunInterval = 2000; break;\r\n      case '1': this.autorunInterval = 1250; break;\r\n      case '2': this.autorunInterval = 800; break;\r\n      case '3': this.autorunInterval = 500; break;\r\n      case '4': this.autorunInterval = 250; break;\r\n      case '5': this.autorunInterval = 100; break;\r\n      case '6': this.autorunInterval = 65; break;\r\n      default: break;\r\n    }\r\n\r\n    if (this.currentState === APP_STATES.RUNNING) {\r\n      clearInterval(this.autorunInstance);\r\n      this.autorunInstance = setInterval(this.nextStep, this.autorunInterval);\r\n    }\r\n  }\r\n\r\n  enableEdgeBtnLogic = (): void => {\r\n    if (this.currentGraph.nodes.length >= 2) {\r\n      this.ui.toggleButton(document.querySelector(this.ui.selectors.addEdgeBtn) !, true);\r\n    } else {\r\n      // if num_nodes is 0 or 1, we can't add an edge\r\n      this.ui.toggleButton(document.querySelector(this.ui.selectors.addEdgeBtn) !, false);\r\n    }\r\n  }\r\n\r\n  enableDeleteBtnLogic = (): void => {\r\n    if (this.currentGraph.nodes.length >= 1) {\r\n      this.ui.toggleButton(document.querySelector(this.ui.selectors.deleteBtn) !, true);\r\n    } else {\r\n      // if num_nodes is 0, get out of DELETE mode\r\n      this.ui.toggleButton(document.querySelector(this.ui.selectors.deleteBtn) !, false);\r\n      this.currentState = APP_STATES.NONE;\r\n    }\r\n  }\r\n\r\n  enableRunBtnLogic = (): void => {\r\n    if (this.currentGraph.nodes.length >= 2) {\r\n      this.ui.toggleButton(document.querySelector(this.ui.selectors.runBtn) !, true);\r\n    } else {\r\n      this.ui.toggleButton(document.querySelector(this.ui.selectors.runBtn) !, false);\r\n    }\r\n  }\r\n\r\n  algoIsRunning = (): boolean => {\r\n    return (\r\n      this.currentState === APP_STATES.RUNNING ||\r\n      this.currentState === APP_STATES.PAUSED\r\n    );\r\n  }\r\n\r\n  globalKeyDown = (e: KeyboardEvent): void => {\r\n    if (this.algoIsRunning()) {\r\n      switch (e.key) {\r\n        case 'ArrowLeft':\r\n          e.preventDefault();\r\n          this.previousBtnHandler();\r\n          break;\r\n        case 'ArrowRight':\r\n          e.preventDefault();\r\n          this.nextBtnHandler();\r\n          break;\r\n        default: break;\r\n      } \r\n    }\r\n  }\r\n\r\n  // Handle add-edge and delete-object states.\r\n  graphClickHandler = (e: Event): void => {\r\n\r\n    // Get which element in the canvas was clicked.\r\n    const getClickedObject = (e: Event): (HTMLElement | null) => {\r\n      const clickTargetParent = (e.target as HTMLElement).parentNode as HTMLElement;\r\n      if (clickTargetParent.classList.contains('graph-node') ||\r\n          clickTargetParent.classList.contains('graph-edge')) {\r\n        return clickTargetParent;\r\n      } else {\r\n        return null;\r\n      }\r\n    }  // end inner-func\r\n\r\n    if (!(this.currentState === APP_STATES.EDGE_EDIT ||\r\n          this.currentState === APP_STATES.DELETE_OBJ ||\r\n          this.currentState === APP_STATES.PREDICTING)) {\r\n      return;\r\n    }\r\n\r\n    const clickedObject = getClickedObject(e);\r\n    if (!clickedObject) return;\r\n\r\n    // Actions when app in add-edge state.\r\n    if (this.currentState === APP_STATES.EDGE_EDIT) {\r\n      // Exit if null or 'graph-edge'\r\n      if (!clickedObject.classList.contains('graph-node')) {\r\n        return;\r\n      }\r\n\r\n      clickedObject.classList.add('focus');\r\n\r\n      // Pick node 1\r\n      if (this.ui.addEdgeStart === null) {\r\n        this.ui.addEdgeStart = clickedObject.dataset.nodeId !;\r\n        return;\r\n      }\r\n\r\n      // Pick node 2\r\n      if (this.ui.addEdgeEnd === null) {\r\n        this.ui.addEdgeEnd = clickedObject.dataset.nodeId !;\r\n\r\n        // If n1 == n2, reset state and exit\r\n        if (this.ui.addEdgeStart === this.ui.addEdgeEnd) {\r\n          this.ui.deselectEdge();\r\n          return;\r\n        }\r\n      }\r\n\r\n      // Add edge to app data structure, and draw to UI.\r\n      if (!checkIfEdgeExists(this.currentGraph.edges, this.ui.addEdgeStart, this.ui.addEdgeEnd)) {\r\n        // Open modal:\r\n        openModal(this.ui.selectors.addEdgeModal);\r\n        const edgeWeightInput = document.querySelector(this.ui.selectors.addEdgeWeightInput) as HTMLInputElement;\r\n        edgeWeightInput.focus();\r\n        edgeWeightInput.select();\r\n        // Remaining code occurs at addEdgeSubmitHandler()\r\n      } else {\r\n        // Reset states:\r\n        this.ui.deselectEdge();\r\n      }\r\n      return;\r\n    } // end if-edge-edit\r\n\r\n    // Actions when app in delete-object state.\r\n    if (this.currentState === APP_STATES.DELETE_OBJ) {\r\n      if (clickedObject.classList.contains('graph-node')) {\r\n        const nodeId = clickedObject.dataset.nodeId;\r\n        this.deleteNode(nodeId!);\r\n        return;\r\n      }\r\n      else if (clickedObject.classList.contains('graph-edge')) {\r\n        const start = clickedObject.dataset.startId;\r\n        const end = clickedObject.dataset.endId;\r\n        this.deleteEdge(start!, end!);\r\n        return;\r\n      }\r\n    }  // end if-delete-obj\r\n\r\n    if (this.currentState === APP_STATES.PREDICTING) {\r\n      if (!clickedObject.classList.contains('graph-node')) {\r\n        return;\r\n      }\r\n\r\n      const clickedNodeId = clickedObject.dataset.nodeId;\r\n\r\n      if (clickedNodeId === this.currentPredSelection!.id && \r\n          clickedNodeId !== this.algoStart!.id) {\r\n        // Remove node from the prediction list\r\n        this.predictionInput.pop();\r\n        this.updatePrediction();\r\n        return;\r\n      }\r\n\r\n      this.predSelectionNeighbours.forEach(node => {\r\n        if (clickedNodeId === node.id) {\r\n          // Add node to the prediction list\r\n          this.predictionInput.push(node);\r\n          this.updatePrediction();\r\n          return;\r\n        }\r\n      });\r\n    }  // end if-predicting\r\n  };\r\n}\r\n\r\nexport { Controller };\r\n","import { Controller } from './controller/Controller';\r\n\r\nconst controller = new Controller();\r\n"]}